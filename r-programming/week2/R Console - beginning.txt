
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[R.app GUI 1.65 (6913) x86_64-apple-darwin13.4.0]

[History restored from /Users/ashleyelizabeth/.Rapp.history]

Error in if (res > 0L) { : argument is of length zero
--- Please select a CRAN mirror for use in this session ---
Error in if (res > 0L) { : argument is of length zero
> install.packages('KernSmooth')
--- Please select a CRAN mirror for use in this session ---
trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/KernSmooth_2.23-14.tgz'
Content type 'application/x-gzip' length 90243 bytes (88 KB)
opened URL
==================================================
downloaded 88 KB


The downloaded binary packages are in
	/var/folders/ww/hxd851js0p9b__2496d92dp00000gn/T//Rtmp8vCV9u/downloaded_packages
> library(KernSmooth)
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> getwd()
[1] "/Users/ashleyelizabeth"
> getwd()
[1] "/Users/ashleyelizabeth/Development/datasciencecoursera/r-programming"
> install.packages("swirl")
also installing the dependencies ‘jsonlite’, ‘mime’, ‘R6’, ‘bitops’, ‘stringr’, ‘testthat’, ‘httr’, ‘yaml’, ‘RCurl’, ‘digest’

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/jsonlite_0.9.15.tgz'
Content type 'application/x-gzip' length 438374 bytes (428 KB)
opened URL
==================================================
downloaded 428 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/mime_0.3.tgz'
Content type 'application/x-gzip' length 22900 bytes (22 KB)
opened URL
==================================================
downloaded 22 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/R6_2.0.1.tgz'
Content type 'application/x-gzip' length 110632 bytes (108 KB)
opened URL
==================================================
downloaded 108 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/bitops_1.0-6.tgz'
Content type 'application/x-gzip' length 23362 bytes (22 KB)
opened URL
==================================================
downloaded 22 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/stringr_0.6.2.tgz'
Content type 'application/x-gzip' length 72797 bytes (71 KB)
opened URL
==================================================
downloaded 71 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/testthat_0.9.1.tgz'
Content type 'application/x-gzip' length 243692 bytes (237 KB)
opened URL
==================================================
downloaded 237 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/httr_0.6.1.tgz'
Content type 'application/x-gzip' length 373891 bytes (365 KB)
opened URL
==================================================
downloaded 365 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/yaml_2.1.13.tgz'
Content type 'application/x-gzip' length 168108 bytes (164 KB)
opened URL
==================================================
downloaded 164 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/RCurl_1.95-4.5.tgz'
Content type 'application/x-gzip' length 718964 bytes (702 KB)
opened URL
==================================================
downloaded 702 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/digest_0.6.8.tgz'
Content type 'application/x-gzip' length 127819 bytes (124 KB)
opened URL
==================================================
downloaded 124 KB

trying URL 'http://cran.cnr.Berkeley.edu/bin/macosx/mavericks/contrib/3.1/swirl_2.2.21.tgz'
Content type 'application/x-gzip' length 133268 bytes (130 KB)
opened URL
==================================================
downloaded 130 KB


The downloaded binary packages are in
	/var/folders/ww/hxd851js0p9b__2496d92dp00000gn/T//Rtmp8vCV9u/downloaded_packages
> library("swirl")

| Hi! Type swirl() when you are ready to begin.

> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did
| then. If you are new, call yourself something unique.

What shall I call you? Ashley

| Thanks, Ashley. Let's cover a few quick housekeeping items before we begin
| our first lesson. First of all, you should know that when you see '...',
| that means you should press Enter when you are done reading and ready to
| continue.

...  <-- That's your cue to press Enter to continue

| Also, when you see 'ANSWER:', the R prompt (>), or when you are asked to
| select from a list, that means it's your turn to enter a response, then
| press Enter to continue.

Select 1, 2, or 3 and press Enter 

1: Continue.
2: Proceed.
3: Let's get going!

Selection: 3

| You can exit swirl and return to the R prompt (>) at any time by pressing
| the Esc key. If you are already at the prompt, type bye() to exit and save
| your progress. When you exit properly, you'll see a short message letting
| you know you've done so.

| When you are at the R prompt (>):
| -- Typing skip() allows you to skip the current question.
| -- Typing play() lets you experiment with R on your own; swirl will ignore
| what you do...
| -- UNTIL you type nxt() which will regain swirl's attention.
| -- Typing bye() causes swirl to exit. Your progress will be saved.
| -- Typing main() returns you to swirl's main menu.
| -- Typing info() displays these options again.

| Let's get started!

...

| To begin, you must install a course. I can install a course for you from the
| internet, or I can send you to a web page
| (https://github.com/swirldev/swirl_courses) which will provide course
| options and directions for installing courses yourself. (If you are not
| connected to the internet, type 0 to exit.)

1: R Programming: The basics of programming in R
2: Regression Models: The basics of regression modeling in R
3: Don't install anything for me. I'll do it myself.

Selection: 1

| Course installed successfully!


| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 0

| Leaving swirl now. Type swirl() to resume.

> #matrices are column-filled 
> #vectors can only have 1 data type -- mismatched types are cast to LCD
> #lists can have multiple data types -- really just a vector of vectors
> #factors are labeled integer values ("Male" "Female" instead of 1, 2)
> #NaN is an undefined mathematical function (instance of Na)
> #Na represents any missing value
> #data frames are like matrices, but can have multiple data types
> #objects can be named to create self-describing objects
> #dimnames() used to name matrix rows and columns
> #read.table (tabular data), read.csv (tabular data), readlines (txt file -> character vector), source (R code), dget (R code)
> #dput(object, file) writes an R object to a file
> #dump like dput, but can use on multiple objects
> #connection interfaces: file, gzfile, bzfile, url
> #subsetting: '[' returns object same class as original, '[[' extracts single object from list or dataframe, '$' extracts single object from list or dataframe if it has a name
> #complete.cases can be used to remove Na values from data
> #veectorization operations can be used instead of "for" or "while" loop
> wdr
Error: object 'wdr' not found
> getwd()
[1] "/Users/ashleyelizabeth/Development/datasciencecoursera/r-programming"
> x <- 4L
> class(x)
[1] "integer"
> x <- c(4, "a", TRUE)
> class(x)
[1] "character"
> x <- c(1,3, 5) 
> y <- c(3, 2, 10)
> cbind(x, y)
     x  y
[1,] 1  3
[2,] 3  2
[3,] 5 10
> x <- list(2, "a", "b", TRUE)
> x[[1]]
[1] 2
> x <- 1:4
> y <- 2
>  x + y
[1] 3 4 5 6
> x <- c(17, 14, 4, 5, 13, 12, 10)
> x[x >= 10] <- 4
> x
[1] 4 4 4 5 4 4 4
> x <- c(17, 14, 4, 5, 13, 12, 10)
> x[x >= 11] <- 4
> x
[1]  4  4  4  5  4  4 10
> read.csv(hw1_data.csv)
Error in read.table(file = file, header = header, sep = sep, quote = quote,  : 
  object 'hw1_data.csv' not found
> read.csv("hw1_data.csv")
    Ozone Solar.R Wind Temp Month Day
1      41     190  7.4   67     5   1
2      36     118  8.0   72     5   2
3      12     149 12.6   74     5   3
4      18     313 11.5   62     5   4
5      NA      NA 14.3   56     5   5
6      28      NA 14.9   66     5   6
7      23     299  8.6   65     5   7
8      19      99 13.8   59     5   8
9       8      19 20.1   61     5   9
10     NA     194  8.6   69     5  10
11      7      NA  6.9   74     5  11
12     16     256  9.7   69     5  12
13     11     290  9.2   66     5  13
14     14     274 10.9   68     5  14
15     18      65 13.2   58     5  15
16     14     334 11.5   64     5  16
17     34     307 12.0   66     5  17
18      6      78 18.4   57     5  18
19     30     322 11.5   68     5  19
20     11      44  9.7   62     5  20
21      1       8  9.7   59     5  21
22     11     320 16.6   73     5  22
23      4      25  9.7   61     5  23
24     32      92 12.0   61     5  24
25     NA      66 16.6   57     5  25
26     NA     266 14.9   58     5  26
27     NA      NA  8.0   57     5  27
28     23      13 12.0   67     5  28
29     45     252 14.9   81     5  29
30    115     223  5.7   79     5  30
31     37     279  7.4   76     5  31
32     NA     286  8.6   78     6   1
33     NA     287  9.7   74     6   2
34     NA     242 16.1   67     6   3
35     NA     186  9.2   84     6   4
36     NA     220  8.6   85     6   5
37     NA     264 14.3   79     6   6
38     29     127  9.7   82     6   7
39     NA     273  6.9   87     6   8
40     71     291 13.8   90     6   9
41     39     323 11.5   87     6  10
42     NA     259 10.9   93     6  11
43     NA     250  9.2   92     6  12
44     23     148  8.0   82     6  13
45     NA     332 13.8   80     6  14
46     NA     322 11.5   79     6  15
47     21     191 14.9   77     6  16
48     37     284 20.7   72     6  17
49     20      37  9.2   65     6  18
50     12     120 11.5   73     6  19
51     13     137 10.3   76     6  20
52     NA     150  6.3   77     6  21
53     NA      59  1.7   76     6  22
54     NA      91  4.6   76     6  23
55     NA     250  6.3   76     6  24
56     NA     135  8.0   75     6  25
57     NA     127  8.0   78     6  26
58     NA      47 10.3   73     6  27
59     NA      98 11.5   80     6  28
60     NA      31 14.9   77     6  29
61     NA     138  8.0   83     6  30
62    135     269  4.1   84     7   1
63     49     248  9.2   85     7   2
64     32     236  9.2   81     7   3
65     NA     101 10.9   84     7   4
66     64     175  4.6   83     7   5
67     40     314 10.9   83     7   6
68     77     276  5.1   88     7   7
69     97     267  6.3   92     7   8
70     97     272  5.7   92     7   9
71     85     175  7.4   89     7  10
72     NA     139  8.6   82     7  11
73     10     264 14.3   73     7  12
74     27     175 14.9   81     7  13
75     NA     291 14.9   91     7  14
76      7      48 14.3   80     7  15
77     48     260  6.9   81     7  16
78     35     274 10.3   82     7  17
79     61     285  6.3   84     7  18
80     79     187  5.1   87     7  19
81     63     220 11.5   85     7  20
82     16       7  6.9   74     7  21
83     NA     258  9.7   81     7  22
84     NA     295 11.5   82     7  23
85     80     294  8.6   86     7  24
86    108     223  8.0   85     7  25
87     20      81  8.6   82     7  26
88     52      82 12.0   86     7  27
89     82     213  7.4   88     7  28
90     50     275  7.4   86     7  29
91     64     253  7.4   83     7  30
92     59     254  9.2   81     7  31
93     39      83  6.9   81     8   1
94      9      24 13.8   81     8   2
95     16      77  7.4   82     8   3
96     78      NA  6.9   86     8   4
97     35      NA  7.4   85     8   5
98     66      NA  4.6   87     8   6
99    122     255  4.0   89     8   7
100    89     229 10.3   90     8   8
101   110     207  8.0   90     8   9
102    NA     222  8.6   92     8  10
103    NA     137 11.5   86     8  11
104    44     192 11.5   86     8  12
105    28     273 11.5   82     8  13
106    65     157  9.7   80     8  14
107    NA      64 11.5   79     8  15
108    22      71 10.3   77     8  16
109    59      51  6.3   79     8  17
110    23     115  7.4   76     8  18
111    31     244 10.9   78     8  19
112    44     190 10.3   78     8  20
113    21     259 15.5   77     8  21
114     9      36 14.3   72     8  22
115    NA     255 12.6   75     8  23
116    45     212  9.7   79     8  24
117   168     238  3.4   81     8  25
118    73     215  8.0   86     8  26
119    NA     153  5.7   88     8  27
120    76     203  9.7   97     8  28
121   118     225  2.3   94     8  29
122    84     237  6.3   96     8  30
123    85     188  6.3   94     8  31
124    96     167  6.9   91     9   1
125    78     197  5.1   92     9   2
126    73     183  2.8   93     9   3
127    91     189  4.6   93     9   4
128    47      95  7.4   87     9   5
129    32      92 15.5   84     9   6
130    20     252 10.9   80     9   7
131    23     220 10.3   78     9   8
132    21     230 10.9   75     9   9
133    24     259  9.7   73     9  10
134    44     236 14.9   81     9  11
135    21     259 15.5   76     9  12
136    28     238  6.3   77     9  13
137     9      24 10.9   71     9  14
138    13     112 11.5   71     9  15
139    46     237  6.9   78     9  16
140    18     224 13.8   67     9  17
141    13      27 10.3   76     9  18
142    24     238 10.3   68     9  19
143    16     201  8.0   82     9  20
144    13     238 12.6   64     9  21
145    23      14  9.2   71     9  22
146    36     139 10.3   81     9  23
147     7      49 10.3   69     9  24
148    14      20 16.6   63     9  25
149    30     193  6.9   70     9  26
150    NA     145 13.2   77     9  27
151    14     191 14.3   75     9  28
152    18     131  8.0   76     9  29
153    20     223 11.5   68     9  30
> data = read.csv("hw1_data.csv")
> data
    Ozone Solar.R Wind Temp Month Day
1      41     190  7.4   67     5   1
2      36     118  8.0   72     5   2
3      12     149 12.6   74     5   3
4      18     313 11.5   62     5   4
5      NA      NA 14.3   56     5   5
6      28      NA 14.9   66     5   6
7      23     299  8.6   65     5   7
8      19      99 13.8   59     5   8
9       8      19 20.1   61     5   9
10     NA     194  8.6   69     5  10
11      7      NA  6.9   74     5  11
12     16     256  9.7   69     5  12
13     11     290  9.2   66     5  13
14     14     274 10.9   68     5  14
15     18      65 13.2   58     5  15
16     14     334 11.5   64     5  16
17     34     307 12.0   66     5  17
18      6      78 18.4   57     5  18
19     30     322 11.5   68     5  19
20     11      44  9.7   62     5  20
21      1       8  9.7   59     5  21
22     11     320 16.6   73     5  22
23      4      25  9.7   61     5  23
24     32      92 12.0   61     5  24
25     NA      66 16.6   57     5  25
26     NA     266 14.9   58     5  26
27     NA      NA  8.0   57     5  27
28     23      13 12.0   67     5  28
29     45     252 14.9   81     5  29
30    115     223  5.7   79     5  30
31     37     279  7.4   76     5  31
32     NA     286  8.6   78     6   1
33     NA     287  9.7   74     6   2
34     NA     242 16.1   67     6   3
35     NA     186  9.2   84     6   4
36     NA     220  8.6   85     6   5
37     NA     264 14.3   79     6   6
38     29     127  9.7   82     6   7
39     NA     273  6.9   87     6   8
40     71     291 13.8   90     6   9
41     39     323 11.5   87     6  10
42     NA     259 10.9   93     6  11
43     NA     250  9.2   92     6  12
44     23     148  8.0   82     6  13
45     NA     332 13.8   80     6  14
46     NA     322 11.5   79     6  15
47     21     191 14.9   77     6  16
48     37     284 20.7   72     6  17
49     20      37  9.2   65     6  18
50     12     120 11.5   73     6  19
51     13     137 10.3   76     6  20
52     NA     150  6.3   77     6  21
53     NA      59  1.7   76     6  22
54     NA      91  4.6   76     6  23
55     NA     250  6.3   76     6  24
56     NA     135  8.0   75     6  25
57     NA     127  8.0   78     6  26
58     NA      47 10.3   73     6  27
59     NA      98 11.5   80     6  28
60     NA      31 14.9   77     6  29
61     NA     138  8.0   83     6  30
62    135     269  4.1   84     7   1
63     49     248  9.2   85     7   2
64     32     236  9.2   81     7   3
65     NA     101 10.9   84     7   4
66     64     175  4.6   83     7   5
67     40     314 10.9   83     7   6
68     77     276  5.1   88     7   7
69     97     267  6.3   92     7   8
70     97     272  5.7   92     7   9
71     85     175  7.4   89     7  10
72     NA     139  8.6   82     7  11
73     10     264 14.3   73     7  12
74     27     175 14.9   81     7  13
75     NA     291 14.9   91     7  14
76      7      48 14.3   80     7  15
77     48     260  6.9   81     7  16
78     35     274 10.3   82     7  17
79     61     285  6.3   84     7  18
80     79     187  5.1   87     7  19
81     63     220 11.5   85     7  20
82     16       7  6.9   74     7  21
83     NA     258  9.7   81     7  22
84     NA     295 11.5   82     7  23
85     80     294  8.6   86     7  24
86    108     223  8.0   85     7  25
87     20      81  8.6   82     7  26
88     52      82 12.0   86     7  27
89     82     213  7.4   88     7  28
90     50     275  7.4   86     7  29
91     64     253  7.4   83     7  30
92     59     254  9.2   81     7  31
93     39      83  6.9   81     8   1
94      9      24 13.8   81     8   2
95     16      77  7.4   82     8   3
96     78      NA  6.9   86     8   4
97     35      NA  7.4   85     8   5
98     66      NA  4.6   87     8   6
99    122     255  4.0   89     8   7
100    89     229 10.3   90     8   8
101   110     207  8.0   90     8   9
102    NA     222  8.6   92     8  10
103    NA     137 11.5   86     8  11
104    44     192 11.5   86     8  12
105    28     273 11.5   82     8  13
106    65     157  9.7   80     8  14
107    NA      64 11.5   79     8  15
108    22      71 10.3   77     8  16
109    59      51  6.3   79     8  17
110    23     115  7.4   76     8  18
111    31     244 10.9   78     8  19
112    44     190 10.3   78     8  20
113    21     259 15.5   77     8  21
114     9      36 14.3   72     8  22
115    NA     255 12.6   75     8  23
116    45     212  9.7   79     8  24
117   168     238  3.4   81     8  25
118    73     215  8.0   86     8  26
119    NA     153  5.7   88     8  27
120    76     203  9.7   97     8  28
121   118     225  2.3   94     8  29
122    84     237  6.3   96     8  30
123    85     188  6.3   94     8  31
124    96     167  6.9   91     9   1
125    78     197  5.1   92     9   2
126    73     183  2.8   93     9   3
127    91     189  4.6   93     9   4
128    47      95  7.4   87     9   5
129    32      92 15.5   84     9   6
130    20     252 10.9   80     9   7
131    23     220 10.3   78     9   8
132    21     230 10.9   75     9   9
133    24     259  9.7   73     9  10
134    44     236 14.9   81     9  11
135    21     259 15.5   76     9  12
136    28     238  6.3   77     9  13
137     9      24 10.9   71     9  14
138    13     112 11.5   71     9  15
139    46     237  6.9   78     9  16
140    18     224 13.8   67     9  17
141    13      27 10.3   76     9  18
142    24     238 10.3   68     9  19
143    16     201  8.0   82     9  20
144    13     238 12.6   64     9  21
145    23      14  9.2   71     9  22
146    36     139 10.3   81     9  23
147     7      49 10.3   69     9  24
148    14      20 16.6   63     9  25
149    30     193  6.9   70     9  26
150    NA     145 13.2   77     9  27
151    14     191 14.3   75     9  28
152    18     131  8.0   76     9  29
153    20     223 11.5   68     9  30
> data[1].isna
Error: unexpected symbol in "data[1].isna"
> is.na(data[1])
       Ozone
  [1,] FALSE
  [2,] FALSE
  [3,] FALSE
  [4,] FALSE
  [5,]  TRUE
  [6,] FALSE
  [7,] FALSE
  [8,] FALSE
  [9,] FALSE
 [10,]  TRUE
 [11,] FALSE
 [12,] FALSE
 [13,] FALSE
 [14,] FALSE
 [15,] FALSE
 [16,] FALSE
 [17,] FALSE
 [18,] FALSE
 [19,] FALSE
 [20,] FALSE
 [21,] FALSE
 [22,] FALSE
 [23,] FALSE
 [24,] FALSE
 [25,]  TRUE
 [26,]  TRUE
 [27,]  TRUE
 [28,] FALSE
 [29,] FALSE
 [30,] FALSE
 [31,] FALSE
 [32,]  TRUE
 [33,]  TRUE
 [34,]  TRUE
 [35,]  TRUE
 [36,]  TRUE
 [37,]  TRUE
 [38,] FALSE
 [39,]  TRUE
 [40,] FALSE
 [41,] FALSE
 [42,]  TRUE
 [43,]  TRUE
 [44,] FALSE
 [45,]  TRUE
 [46,]  TRUE
 [47,] FALSE
 [48,] FALSE
 [49,] FALSE
 [50,] FALSE
 [51,] FALSE
 [52,]  TRUE
 [53,]  TRUE
 [54,]  TRUE
 [55,]  TRUE
 [56,]  TRUE
 [57,]  TRUE
 [58,]  TRUE
 [59,]  TRUE
 [60,]  TRUE
 [61,]  TRUE
 [62,] FALSE
 [63,] FALSE
 [64,] FALSE
 [65,]  TRUE
 [66,] FALSE
 [67,] FALSE
 [68,] FALSE
 [69,] FALSE
 [70,] FALSE
 [71,] FALSE
 [72,]  TRUE
 [73,] FALSE
 [74,] FALSE
 [75,]  TRUE
 [76,] FALSE
 [77,] FALSE
 [78,] FALSE
 [79,] FALSE
 [80,] FALSE
 [81,] FALSE
 [82,] FALSE
 [83,]  TRUE
 [84,]  TRUE
 [85,] FALSE
 [86,] FALSE
 [87,] FALSE
 [88,] FALSE
 [89,] FALSE
 [90,] FALSE
 [91,] FALSE
 [92,] FALSE
 [93,] FALSE
 [94,] FALSE
 [95,] FALSE
 [96,] FALSE
 [97,] FALSE
 [98,] FALSE
 [99,] FALSE
[100,] FALSE
[101,] FALSE
[102,]  TRUE
[103,]  TRUE
[104,] FALSE
[105,] FALSE
[106,] FALSE
[107,]  TRUE
[108,] FALSE
[109,] FALSE
[110,] FALSE
[111,] FALSE
[112,] FALSE
[113,] FALSE
[114,] FALSE
[115,]  TRUE
[116,] FALSE
[117,] FALSE
[118,] FALSE
[119,]  TRUE
[120,] FALSE
[121,] FALSE
[122,] FALSE
[123,] FALSE
[124,] FALSE
[125,] FALSE
[126,] FALSE
[127,] FALSE
[128,] FALSE
[129,] FALSE
[130,] FALSE
[131,] FALSE
[132,] FALSE
[133,] FALSE
[134,] FALSE
[135,] FALSE
[136,] FALSE
[137,] FALSE
[138,] FALSE
[139,] FALSE
[140,] FALSE
[141,] FALSE
[142,] FALSE
[143,] FALSE
[144,] FALSE
[145,] FALSE
[146,] FALSE
[147,] FALSE
[148,] FALSE
[149,] FALSE
[150,]  TRUE
[151,] FALSE
[152,] FALSE
[153,] FALSE
> ozone = [!is.na(data[1])]
Error: unexpected '[' in "ozone = ["
> ozone = !is.na(data[1])
> ozone
       Ozone
  [1,]  TRUE
  [2,]  TRUE
  [3,]  TRUE
  [4,]  TRUE
  [5,] FALSE
  [6,]  TRUE
  [7,]  TRUE
  [8,]  TRUE
  [9,]  TRUE
 [10,] FALSE
 [11,]  TRUE
 [12,]  TRUE
 [13,]  TRUE
 [14,]  TRUE
 [15,]  TRUE
 [16,]  TRUE
 [17,]  TRUE
 [18,]  TRUE
 [19,]  TRUE
 [20,]  TRUE
 [21,]  TRUE
 [22,]  TRUE
 [23,]  TRUE
 [24,]  TRUE
 [25,] FALSE
 [26,] FALSE
 [27,] FALSE
 [28,]  TRUE
 [29,]  TRUE
 [30,]  TRUE
 [31,]  TRUE
 [32,] FALSE
 [33,] FALSE
 [34,] FALSE
 [35,] FALSE
 [36,] FALSE
 [37,] FALSE
 [38,]  TRUE
 [39,] FALSE
 [40,]  TRUE
 [41,]  TRUE
 [42,] FALSE
 [43,] FALSE
 [44,]  TRUE
 [45,] FALSE
 [46,] FALSE
 [47,]  TRUE
 [48,]  TRUE
 [49,]  TRUE
 [50,]  TRUE
 [51,]  TRUE
 [52,] FALSE
 [53,] FALSE
 [54,] FALSE
 [55,] FALSE
 [56,] FALSE
 [57,] FALSE
 [58,] FALSE
 [59,] FALSE
 [60,] FALSE
 [61,] FALSE
 [62,]  TRUE
 [63,]  TRUE
 [64,]  TRUE
 [65,] FALSE
 [66,]  TRUE
 [67,]  TRUE
 [68,]  TRUE
 [69,]  TRUE
 [70,]  TRUE
 [71,]  TRUE
 [72,] FALSE
 [73,]  TRUE
 [74,]  TRUE
 [75,] FALSE
 [76,]  TRUE
 [77,]  TRUE
 [78,]  TRUE
 [79,]  TRUE
 [80,]  TRUE
 [81,]  TRUE
 [82,]  TRUE
 [83,] FALSE
 [84,] FALSE
 [85,]  TRUE
 [86,]  TRUE
 [87,]  TRUE
 [88,]  TRUE
 [89,]  TRUE
 [90,]  TRUE
 [91,]  TRUE
 [92,]  TRUE
 [93,]  TRUE
 [94,]  TRUE
 [95,]  TRUE
 [96,]  TRUE
 [97,]  TRUE
 [98,]  TRUE
 [99,]  TRUE
[100,]  TRUE
[101,]  TRUE
[102,] FALSE
[103,] FALSE
[104,]  TRUE
[105,]  TRUE
[106,]  TRUE
[107,] FALSE
[108,]  TRUE
[109,]  TRUE
[110,]  TRUE
[111,]  TRUE
[112,]  TRUE
[113,]  TRUE
[114,]  TRUE
[115,] FALSE
[116,]  TRUE
[117,]  TRUE
[118,]  TRUE
[119,] FALSE
[120,]  TRUE
[121,]  TRUE
[122,]  TRUE
[123,]  TRUE
[124,]  TRUE
[125,]  TRUE
[126,]  TRUE
[127,]  TRUE
[128,]  TRUE
[129,]  TRUE
[130,]  TRUE
[131,]  TRUE
[132,]  TRUE
[133,]  TRUE
[134,]  TRUE
[135,]  TRUE
[136,]  TRUE
[137,]  TRUE
[138,]  TRUE
[139,]  TRUE
[140,]  TRUE
[141,]  TRUE
[142,]  TRUE
[143,]  TRUE
[144,]  TRUE
[145,]  TRUE
[146,]  TRUE
[147,]  TRUE
[148,]  TRUE
[149,]  TRUE
[150,] FALSE
[151,]  TRUE
[152,]  TRUE
[153,]  TRUE
> bad <- is.na(data[1])
> ozone = data[1]
> ozone[!bad]
  [1]  41  36  12  18  28  23  19   8   7  16  11  14  18  14  34   6  30  11
 [19]   1  11   4  32  23  45 115  37  29  71  39  23  21  37  20  12  13 135
 [37]  49  32  64  40  77  97  97  85  10  27   7  48  35  61  79  63  16  80
 [55] 108  20  52  82  50  64  59  39   9  16  78  35  66 122  89 110  44  28
 [73]  65  22  59  23  31  44  21   9  45 168  73  76 118  84  85  96  78  73
 [91]  91  47  32  20  23  21  24  44  21  28   9  13  46  18  13  24  16  13
[109]  23  36   7  14  30  14  18  20
> mean(ozone[!bad])
[1] 42.12931
> #Ozone values are above 31 and Temp values are above 90
> newdata <- data[ which(data[1] >= 32 & data[4] >= 91), ]
> newdata
    Ozone Solar.R Wind Temp Month Day
69     97     267  6.3   92     7   8
70     97     272  5.7   92     7   9
120    76     203  9.7   97     8  28
121   118     225  2.3   94     8  29
122    84     237  6.3   96     8  30
123    85     188  6.3   94     8  31
124    96     167  6.9   91     9   1
125    78     197  5.1   92     9   2
126    73     183  2.8   93     9   3
127    91     189  4.6   93     9   4
> mean(newdata[2])
[1] NA
Warning message:
In mean.default(newdata[2]) :
  argument is not numeric or logical: returning NA
> solar_r = newdata[2]
> solar_r
    Solar.R
69      267
70      272
120     203
121     225
122     237
123     188
124     167
125     197
126     183
127     189
> mean(solar_r)
[1] NA
Warning message:
In mean.default(solar_r) : argument is not numeric or logical: returning NA
> class(solar_r)
[1] "data.frame"
> solar_r[1]
    Solar.R
69      267
70      272
120     203
121     225
122     237
123     188
124     167
125     197
126     183
127     189
> mean(solar_r[1])
[1] NA
Warning message:
In mean.default(solar_r[1]) :
  argument is not numeric or logical: returning NA
> solar <- c(267,272,203,225,237,188,167,197,183,189)
> mean(solar)
[1] 212.8
> newnewdata <- data[ which(data[5] == 6), ]
> newnewdata
   Ozone Solar.R Wind Temp Month Day
32    NA     286  8.6   78     6   1
33    NA     287  9.7   74     6   2
34    NA     242 16.1   67     6   3
35    NA     186  9.2   84     6   4
36    NA     220  8.6   85     6   5
37    NA     264 14.3   79     6   6
38    29     127  9.7   82     6   7
39    NA     273  6.9   87     6   8
40    71     291 13.8   90     6   9
41    39     323 11.5   87     6  10
42    NA     259 10.9   93     6  11
43    NA     250  9.2   92     6  12
44    23     148  8.0   82     6  13
45    NA     332 13.8   80     6  14
46    NA     322 11.5   79     6  15
47    21     191 14.9   77     6  16
48    37     284 20.7   72     6  17
49    20      37  9.2   65     6  18
50    12     120 11.5   73     6  19
51    13     137 10.3   76     6  20
52    NA     150  6.3   77     6  21
53    NA      59  1.7   76     6  22
54    NA      91  4.6   76     6  23
55    NA     250  6.3   76     6  24
56    NA     135  8.0   75     6  25
57    NA     127  8.0   78     6  26
58    NA      47 10.3   73     6  27
59    NA      98 11.5   80     6  28
60    NA      31 14.9   77     6  29
61    NA     138  8.0   83     6  30
> mean(newnewdata[4])
[1] NA
Warning message:
In mean.default(newnewdata[4]) :
  argument is not numeric or logical: returning NA
> temp <- c(78,74,67,84,85,79,82,87,90,87,93,92,82,80,79,77,72,65,73,76,77,76,76,76,75,78,73,80,77,83
+ )
> temp <- c(78,74,67,84,85,79,82,87,90,87,93,92,82,80,79,77,72,65,73,76,77,76,76,76,75,78,73,80,77,83)
> temp
 [1] 78 74 67 84 85 79 82 87 90 87 93 92 82 80 79 77 72 65 73 76 77 76 76 76 75
[26] 78 73 80 77 83
> mean(temp)
[1] 79.1
> max(data[data(5)==5)])
Error: unexpected ')' in "max(data[data(5)==5)"
> max(data[data(5)==5])
[1] NA
Warning message:
In data(5) : data set ‘5’ not found
> s = [data(5)==5]
Error: unexpected '[' in "s = ["
> s <- [data(5)==5]
Error: unexpected '[' in "s <- ["
> s <- data[data[5]==5]
> s
  [1]  41.0  36.0  12.0  18.0    NA  28.0  23.0  19.0   8.0    NA   7.0  16.0
 [13]  11.0  14.0  18.0  14.0  34.0   6.0  30.0  11.0   1.0  11.0   4.0  32.0
 [25]    NA    NA    NA  23.0  45.0 115.0  37.0 190.0 118.0 149.0 313.0    NA
 [37]    NA 299.0  99.0  19.0 194.0    NA 256.0 290.0 274.0  65.0 334.0 307.0
 [49]  78.0 322.0  44.0   8.0 320.0  25.0  92.0  66.0 266.0    NA  13.0 252.0
 [61] 223.0 279.0   7.4   8.0  12.6  11.5  14.3  14.9   8.6  13.8  20.1   8.6
 [73]   6.9   9.7   9.2  10.9  13.2  11.5  12.0  18.4  11.5   9.7   9.7  16.6
 [85]   9.7  12.0  16.6  14.9   8.0  12.0  14.9   5.7   7.4  67.0  72.0  74.0
 [97]  62.0  56.0  66.0  65.0  59.0  61.0  69.0  74.0  69.0  66.0  68.0  58.0
[109]  64.0  66.0  57.0  68.0  62.0  59.0  73.0  61.0  61.0  57.0  58.0  57.0
[121]  67.0  81.0  79.0  76.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0
[133]   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0
[145]   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   5.0   1.0
[157]   2.0   3.0   4.0   5.0   6.0   7.0   8.0   9.0  10.0  11.0  12.0  13.0
[169]  14.0  15.0  16.0  17.0  18.0  19.0  20.0  21.0  22.0  23.0  24.0  25.0
[181]  26.0  27.0  28.0  29.0  30.0  31.0
> data[5]
    Month
1       5
2       5
3       5
4       5
5       5
6       5
7       5
8       5
9       5
10      5
11      5
12      5
13      5
14      5
15      5
16      5
17      5
18      5
19      5
20      5
21      5
22      5
23      5
24      5
25      5
26      5
27      5
28      5
29      5
30      5
31      5
32      6
33      6
34      6
35      6
36      6
37      6
38      6
39      6
40      6
41      6
42      6
43      6
44      6
45      6
46      6
47      6
48      6
49      6
50      6
51      6
52      6
53      6
54      6
55      6
56      6
57      6
58      6
59      6
60      6
61      6
62      7
63      7
64      7
65      7
66      7
67      7
68      7
69      7
70      7
71      7
72      7
73      7
74      7
75      7
76      7
77      7
78      7
79      7
80      7
81      7
82      7
83      7
84      7
85      7
86      7
87      7
88      7
89      7
90      7
91      7
92      7
93      8
94      8
95      8
96      8
97      8
98      8
99      8
100     8
101     8
102     8
103     8
104     8
105     8
106     8
107     8
108     8
109     8
110     8
111     8
112     8
113     8
114     8
115     8
116     8
117     8
118     8
119     8
120     8
121     8
122     8
123     8
124     9
125     9
126     9
127     9
128     9
129     9
130     9
131     9
132     9
133     9
134     9
135     9
136     9
137     9
138     9
139     9
140     9
141     9
142     9
143     9
144     9
145     9
146     9
147     9
148     9
149     9
150     9
151     9
152     9
153     9
> data[5]==5
       Month
  [1,]  TRUE
  [2,]  TRUE
  [3,]  TRUE
  [4,]  TRUE
  [5,]  TRUE
  [6,]  TRUE
  [7,]  TRUE
  [8,]  TRUE
  [9,]  TRUE
 [10,]  TRUE
 [11,]  TRUE
 [12,]  TRUE
 [13,]  TRUE
 [14,]  TRUE
 [15,]  TRUE
 [16,]  TRUE
 [17,]  TRUE
 [18,]  TRUE
 [19,]  TRUE
 [20,]  TRUE
 [21,]  TRUE
 [22,]  TRUE
 [23,]  TRUE
 [24,]  TRUE
 [25,]  TRUE
 [26,]  TRUE
 [27,]  TRUE
 [28,]  TRUE
 [29,]  TRUE
 [30,]  TRUE
 [31,]  TRUE
 [32,] FALSE
 [33,] FALSE
 [34,] FALSE
 [35,] FALSE
 [36,] FALSE
 [37,] FALSE
 [38,] FALSE
 [39,] FALSE
 [40,] FALSE
 [41,] FALSE
 [42,] FALSE
 [43,] FALSE
 [44,] FALSE
 [45,] FALSE
 [46,] FALSE
 [47,] FALSE
 [48,] FALSE
 [49,] FALSE
 [50,] FALSE
 [51,] FALSE
 [52,] FALSE
 [53,] FALSE
 [54,] FALSE
 [55,] FALSE
 [56,] FALSE
 [57,] FALSE
 [58,] FALSE
 [59,] FALSE
 [60,] FALSE
 [61,] FALSE
 [62,] FALSE
 [63,] FALSE
 [64,] FALSE
 [65,] FALSE
 [66,] FALSE
 [67,] FALSE
 [68,] FALSE
 [69,] FALSE
 [70,] FALSE
 [71,] FALSE
 [72,] FALSE
 [73,] FALSE
 [74,] FALSE
 [75,] FALSE
 [76,] FALSE
 [77,] FALSE
 [78,] FALSE
 [79,] FALSE
 [80,] FALSE
 [81,] FALSE
 [82,] FALSE
 [83,] FALSE
 [84,] FALSE
 [85,] FALSE
 [86,] FALSE
 [87,] FALSE
 [88,] FALSE
 [89,] FALSE
 [90,] FALSE
 [91,] FALSE
 [92,] FALSE
 [93,] FALSE
 [94,] FALSE
 [95,] FALSE
 [96,] FALSE
 [97,] FALSE
 [98,] FALSE
 [99,] FALSE
[100,] FALSE
[101,] FALSE
[102,] FALSE
[103,] FALSE
[104,] FALSE
[105,] FALSE
[106,] FALSE
[107,] FALSE
[108,] FALSE
[109,] FALSE
[110,] FALSE
[111,] FALSE
[112,] FALSE
[113,] FALSE
[114,] FALSE
[115,] FALSE
[116,] FALSE
[117,] FALSE
[118,] FALSE
[119,] FALSE
[120,] FALSE
[121,] FALSE
[122,] FALSE
[123,] FALSE
[124,] FALSE
[125,] FALSE
[126,] FALSE
[127,] FALSE
[128,] FALSE
[129,] FALSE
[130,] FALSE
[131,] FALSE
[132,] FALSE
[133,] FALSE
[134,] FALSE
[135,] FALSE
[136,] FALSE
[137,] FALSE
[138,] FALSE
[139,] FALSE
[140,] FALSE
[141,] FALSE
[142,] FALSE
[143,] FALSE
[144,] FALSE
[145,] FALSE
[146,] FALSE
[147,] FALSE
[148,] FALSE
[149,] FALSE
[150,] FALSE
[151,] FALSE
[152,] FALSE
[153,] FALSE
> ozone
    Ozone
1      41
2      36
3      12
4      18
5      NA
6      28
7      23
8      19
9       8
10     NA
11      7
12     16
13     11
14     14
15     18
16     14
17     34
18      6
19     30
20     11
21      1
22     11
23      4
24     32
25     NA
26     NA
27     NA
28     23
29     45
30    115
31     37
32     NA
33     NA
34     NA
35     NA
36     NA
37     NA
38     29
39     NA
40     71
41     39
42     NA
43     NA
44     23
45     NA
46     NA
47     21
48     37
49     20
50     12
51     13
52     NA
53     NA
54     NA
55     NA
56     NA
57     NA
58     NA
59     NA
60     NA
61     NA
62    135
63     49
64     32
65     NA
66     64
67     40
68     77
69     97
70     97
71     85
72     NA
73     10
74     27
75     NA
76      7
77     48
78     35
79     61
80     79
81     63
82     16
83     NA
84     NA
85     80
86    108
87     20
88     52
89     82
90     50
91     64
92     59
93     39
94      9
95     16
96     78
97     35
98     66
99    122
100    89
101   110
102    NA
103    NA
104    44
105    28
106    65
107    NA
108    22
109    59
110    23
111    31
112    44
113    21
114     9
115    NA
116    45
117   168
118    73
119    NA
120    76
121   118
122    84
123    85
124    96
125    78
126    73
127    91
128    47
129    32
130    20
131    23
132    21
133    24
134    44
135    21
136    28
137     9
138    13
139    46
140    18
141    13
142    24
143    16
144    13
145    23
146    36
147     7
148    14
149    30
150    NA
151    14
152    18
153    20
> newnewnewdata <- data[ which(data[5] == 5), ]
> newnewnewdata
   Ozone Solar.R Wind Temp Month Day
1     41     190  7.4   67     5   1
2     36     118  8.0   72     5   2
3     12     149 12.6   74     5   3
4     18     313 11.5   62     5   4
5     NA      NA 14.3   56     5   5
6     28      NA 14.9   66     5   6
7     23     299  8.6   65     5   7
8     19      99 13.8   59     5   8
9      8      19 20.1   61     5   9
10    NA     194  8.6   69     5  10
11     7      NA  6.9   74     5  11
12    16     256  9.7   69     5  12
13    11     290  9.2   66     5  13
14    14     274 10.9   68     5  14
15    18      65 13.2   58     5  15
16    14     334 11.5   64     5  16
17    34     307 12.0   66     5  17
18     6      78 18.4   57     5  18
19    30     322 11.5   68     5  19
20    11      44  9.7   62     5  20
21     1       8  9.7   59     5  21
22    11     320 16.6   73     5  22
23     4      25  9.7   61     5  23
24    32      92 12.0   61     5  24
25    NA      66 16.6   57     5  25
26    NA     266 14.9   58     5  26
27    NA      NA  8.0   57     5  27
28    23      13 12.0   67     5  28
29    45     252 14.9   81     5  29
30   115     223  5.7   79     5  30
31    37     279  7.4   76     5  31
> may_ozone = newnewnewdata[1]
> may_ozone
   Ozone
1     41
2     36
3     12
4     18
5     NA
6     28
7     23
8     19
9      8
10    NA
11     7
12    16
13    11
14    14
15    18
16    14
17    34
18     6
19    30
20    11
21     1
22    11
23     4
24    32
25    NA
26    NA
27    NA
28    23
29    45
30   115
31    37
> max(maz_ozone)
Error: object 'maz_ozone' not found
> max(max_ozone)
Error: object 'max_ozone' not found
> max(may_ozone)
[1] NA
> bad = is.na(may_ozone)
> bad
   Ozone
1  FALSE
2  FALSE
3  FALSE
4  FALSE
5   TRUE
6  FALSE
7  FALSE
8  FALSE
9  FALSE
10  TRUE
11 FALSE
12 FALSE
13 FALSE
14 FALSE
15 FALSE
16 FALSE
17 FALSE
18 FALSE
19 FALSE
20 FALSE
21 FALSE
22 FALSE
23 FALSE
24 FALSE
25  TRUE
26  TRUE
27  TRUE
28 FALSE
29 FALSE
30 FALSE
31 FALSE
> max(may_ozone[!bad])
[1] 115
> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did
| then. If you are new, call yourself something unique.

What shall I call you? Ashley

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 1
  |                                                                     |   0%

| In this lesson, we will explore some basic building blocks of the R
| programming language.

...
  |==                                                                   |   3%
| If at any point you'd like more information on a particular topic related to
| R, you can type help.start() at the prompt, which will open a menu of
| resources (either within RStudio or your default web browser, depending on
| your setup). Alternatively, a simple web search often yields the answer
| you're looking for.

...
  |====                                                                 |   5%
| In its simplest form, R can be used as an interactive calculator. Type 5 + 7
| and press Enter.

> 5+7
[1] 12

| Your dedication is inspiring!
  |======                                                               |   8%
| R simply prints the result of 12 by default. However, R is a programming
| language and often the reason we use a programming language as opposed to a
| calculator is to automate some process or avoid unnecessary repetition.

...
  |=======                                                              |  11%
| In this case, we may want to use our result from above in a second
| calculation. Instead of retyping 5 + 7 every time we need it, we can just
| create a new variable that stores the result.

...
  |=========                                                            |  14%
| The way you assign a value to a variable in R is by using the assignment
| operator, which is just a 'less than' symbol followed by a 'minus' sign. It
| looks like this: <-

...
  |===========                                                          |  16%
| Think of the assignment operator as an arrow. You are assigning the value on
| the right side of the arrow to the variable name on the left side of the
| arrow.

...
  |=============                                                        |  19%
| To assign the result of 5 + 7 to a new variable called x, you type x <- 5 +
| 7. This can be read as 'x gets 5 plus 7'. Give it a try now.

> x <- 5 + 7

| You nailed it! Good job!
  |===============                                                      |  22%
| You'll notice that R did not print the result of 12 this time. When you use
| the assignment operator, R assumes that you don't want to see the result
| immediately, but rather that you intend to use the result for something else
| later on.

...
  |=================                                                    |  24%
| To view the contents of the variable x, just type x and press Enter. Try it
| now.

> x
[1] 12

| You are really on a roll!
  |===================                                                  |  27%
| Now, store the result of x - 3 in a new variable called y.

> y <- x - 3

| You're the best!
  |=====================                                                |  30%
| What is the value of y? Type y to find out.

> y
[1] 9

| Excellent work!
  |======================                                               |  32%
| Now, let's create a small collection of numbers called a vector. Any object
| that contains data is called a data structure and numeric vectors are the
| simplest type of data structure in R. In fact, even a single number is
| considered a vector of length one.

...
  |========================                                             |  35%
| The easiest way to create a vector is with the c() function, which stands
| for 'concatenate' or 'combine'. To create a vector containing the numbers
| 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a
| variable called z.

> z <- c(1.1, 9, 3.14)

| You are quite good my friend!
  |==========================                                           |  38%
| Anytime you have questions about a particular function, you can access R's
| built-in help files via the `?` command. For example, if you want more
| information on the c() function, type ?c without the parentheses that
| normally follow a function name. Give it a try.

> ?c
starting httpd help server ... done

| You are amazing!
  |============================                                         |  41%
| Type z to view its contents. Notice that there are no commas separating the
| values in the output.

> z
[1] 1.10 9.00 3.14

| Perseverance, that's the answer.
  |==============================                                       |  43%
| You can combine vectors to make a new vector. Create a new vector that
| contains z, 555, then z again in that order. Don't assign this vector to a
| new variable, so that we can just see the result immediately.

> c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| You are quite good my friend!
  |================================                                     |  46%
| Numeric vectors can be used in arithmetic expressions. Type the following to
| see what happens: z * 2 + 100.

> z * 2 + 100
[1] 102.20 118.00 106.28

| Keep up the great work!
  |==================================                                   |  49%
| First, R multiplied each of the three elements in z by 2. Then it added 100
| to each element to get the result you see above.

...
  |===================================                                  |  51%
| Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2
| means 'x squared'). To take the square root, use the sqrt() function and to
| take the absolute value, use the abs() function.

...
  |=====================================                                |  54%
| Take the square root of z - 1 and assign it to a new variable called
| my_sqrt.

> my_sqrt <- sqrt(z-1)

| You nailed it! Good job!
  |=======================================                              |  57%
| Before we view the contents of the my_sqrt variable, what do you think it
| contains?

1: a vector of length 3
2: a vector of length 0 (i.e. an empty vector)
3: a single number (i.e a vector of length 1)

Selection: 1

| You are doing so well!
  |=========================================                            |  59%
| Print the contents of my_sqrt.

> my_sqrt
[1] 0.3162278 2.8284271 1.4628739

| You are really on a roll!
  |===========================================                          |  62%
| As you may have guessed, R first subtracted 1 from each element of z, then
| took the square root of each element. This leaves you with a vector of the
| same length as the original vector z.

...
  |=============================================                        |  65%
| Now, create a new variable called my_div that gets the value of z divided by
| my_sqrt.

> my_div <- z/my_sqrt

| You are doing so well!
  |===============================================                      |  68%
| Which statement do you think is true?

1: my_div is undefined
2: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
3: my_div is a single number (i.e a vector of length 1)

Selection: 2

| You are really on a roll!
  |================================================                     |  70%
| Go ahead and print the contents of my_div.

> my_div
[1] 3.478505 3.181981 2.146460

| All that practice is paying off!
  |==================================================                   |  73%
| When given two vectors of the same length, R simply performs the specified
| arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the
| vectors are of different lengths, R 'recycles' the shorter vector until it
| is the same length as the longer vector.

...
  |====================================================                 |  76%
| When we did z * 2 + 100 in our earlier example, z was a vector of length 3,
| but technically 2 and 100 are each vectors of length 1.

...
  |======================================================               |  78%
| Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and the 100
| to make a vector of 100s. In other words, when you ask R to compute z * 2 +
| 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100).

...
  |========================================================             |  81%
| To see another example of how this vector 'recycling' works, try adding c(1,
| 2, 3, 4) and c(0, 10). Don't worry about saving the result in a new
| variable.

> c(1,2,3,4) + c(0,10)
[1]  1 12  3 14

| All that practice is paying off!
  |==========================================================           |  84%
| If the length of the shorter vector does not divide evenly into the length
| of the longer vector, R will still apply the 'recycling' method, but will
| throw a warning to let you know something fishy might be going on.

...
  |============================================================         |  86%
| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| Keep up the great work!
  |==============================================================       |  89%
| Before concluding this lesson, I'd like to show you a couple of time-saving
| tricks.

...
  |===============================================================      |  92%
| Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made
| a mistake and that you meant to add 1000 instead of 100. You could either
| re-type the expression, or...

...
  |=================================================================    |  95%
| In many programming environments, the up arrow will cycle through previous
| commands. Try hitting the up arrow on your keyboard until you get to this
| command (z * 2 + 100), then change 100 to 1000 and hit Enter. If the up
| arrow doesn't work for you, just type the corrected command.

> z * 2 + 1000
[1] 1002.20 1018.00 1006.28

| Your dedication is inspiring!
  |===================================================================  |  97%
| Finally, let's pretend you'd like to view the contents of a variable that
| you created earlier, but you can't seem to remember if you named it my_div
| or myDiv. You could try both and see what works, or...

...
  |=====================================================================| 100%
| You can type the first two letters of the variable name, then hit the Tab
| key (possibly more than once). Most programming environments will provide a
| list of variables that you've created that begin with 'my'. This is called
| auto-completion and can be quite handy when you have many variables in your
| workspace. Give it a try. (If auto-completion doesn't work for you, just
| type my_div and press Enter.)

> my_div
[1] 3.478505 3.181981 2.146460

| You are doing so well!

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| The first item I need is your Course ID. For example, if the homepage for
| your Coursera course was 'https://class.coursera.org/rprog-001', then your
| course ID would be 'rprog-001' (without the quotes).

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013,
| Basic_Building_Blocks.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 2
  |                                                                     |   0%

| In this lesson, you'll learn how to examine your local workspace in R and
| begin to explore the relationship between your workspace and the file system
| of your machine.

...
  |==                                                                   |   2%
| Because different operating systems have different conventions with regards
| to things like file paths, the outputs of these commands may vary across
| machines.

...
  |===                                                                  |   5%
| However it's important to note that R provides a common API (a common set of
| commands) for interacting with files, that way your code will work across
| different kinds of computers.

...
  |=====                                                                |   7%
| Let's jump right in so you can get a feel for how these special functions
| work!

...
  |=======                                                              |  10%
| Determine which directory your R session is using as its current working
| directory using getwd().

> getwd()
[1] "/Users/ashleyelizabeth/Development/datasciencecoursera/r-programming"

| That's a job well done!
  |========                                                             |  12%
| List all the objects in your local workspace using ls().

> ls()
 [1] "bad"           "data"          "may_ozone"     "my_div"       
 [5] "my_sqrt"       "newdata"       "newnewdata"    "newnewnewdata"
 [9] "ozone"         "s"             "solar"         "solar_r"      
[13] "temp"          "x"             "y"             "z"            

| Nice work!
  |==========                                                           |  15%
| Some R commands are the same as their equivalents commands on Linux or on a
| Mac. Both Linux and Mac operating systems are based on an operating system
| called Unix. It's always a good idea to learn more about Unix!

...
  |============                                                         |  17%
| Assign 9 to x using x <- 9.

> x <- 9

| You are doing so well!
  |=============                                                        |  20%
| Now take a look at objects that are in your workspace using ls().

> ls()
 [1] "bad"           "data"          "may_ozone"     "my_div"       
 [5] "my_sqrt"       "newdata"       "newnewdata"    "newnewnewdata"
 [9] "ozone"         "s"             "solar"         "solar_r"      
[13] "temp"          "x"             "y"             "z"            

| That's the answer I was looking for.
  |===============                                                      |  22%
| List all the files in your working directory using list.files() or dir().

> files()
Error: could not find function "files"
> dir()
[1] "hw1_data.csv"              "rprog-data-quiz1_data.zip"

| Your dedication is inspiring!
  |=================                                                    |  24%
| As we go through this lesson, you should be examining the help page for each
| new function. Check out the help page for list.files with the command
| ?list.files.

> list.files()
[1] "hw1_data.csv"              "rprog-data-quiz1_data.zip"

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| Type ?list.files to see the help page.

> >list.files
Error: unexpected '>' in ">"
> ?list.files

| That's the answer I was looking for.
  |===================                                                  |  27%
| One of the most helpful parts of any R help file is the See Also section.
| Read that section for list.files. Some of these functions may be used in
| later portions of this lesson.

...
  |====================                                                 |  29%
| Using the args() function on a function name is also a handy way to see what
| arguments a function can take.

...
  |======================                                               |  32%
| Use the args() function to determine the arguments to list.files().

> args(list.files())
NULL

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Type args(list.files) to see the arguments to list.files.

> args(list.files)
function (path = ".", pattern = NULL, all.files = FALSE, full.names = FALSE, 
    recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, 
    no.. = FALSE) 
NULL

| All that practice is paying off!
  |========================                                             |  34%
| Assign the value of the current working directory to a variable called
| "old.dir".

> old.dir = getwd()

| Try again. Getting it right on the first try is boring anyway! Or, type
| info() for more options.

| Type old.dir <- getwd() to assign the value of the current working directory
| to a variable called "old.dir".

> old.dir <- getwd()

| That's correct!
  |=========================                                            |  37%
| We will use old.dir at the end of this lesson to move back to the place that
| we started. A lot of query functions like getwd() have the useful property
| that they return the answer to the question as a result of the function.

...
  |===========================                                          |  39%
| Use dir.create() to create a directory in the current working directory
| called "testdir".

> dir.create(testdir)
Error in dir.create(testdir) : object 'testdir' not found
> dir.create("testdir")

| You got it!
  |=============================                                        |  41%
| We will do all our work in this new directory and then delete it after we
| are done. This is the R analog to "Take only pictures, leave only
| footprints."

...
  |==============================                                       |  44%
| Set your working directory to "testdir" with the setwd() command.

> setwd("testdir")

| That's the answer I was looking for.
  |================================                                     |  46%
| In general, you will want your working directory to be someplace sensible,
| perhaps created for the specific project that you are working on. In fact,
| organizing your work in R packages using RStudio is an excellent option.
| Check out RStudio at http://www.rstudio.com/

...
  |==================================                                   |  49%
| Create a file in your working directory called "mytest.R" using the
| file.create() function.

> file.create("mytest.R")
[1] TRUE

| Your dedication is inspiring!
  |===================================                                  |  51%
| This should be the only file in this newly created directory. Let's check
| this by listing all the files in the current directory.

> dir()
[1] "mytest.R"

| Almost! Try again. Or, type info() for more options.

| list.files() shows that the directory only contains mytest.R.

> list.files()
[1] "mytest.R"

| Keep up the great work!
  |=====================================                                |  54%
| Check to see if "mytest.R" exists in the working directory using the
| file.exists() function.

> file.exists("mytest.R")
[1] TRUE

| You are really on a roll!
  |=======================================                              |  56%
| These sorts of functions are excessive for interactive use. But, if you are
| running a program that loops through a series of files and does some
| processing on each one, you will want to check to see that each exists
| before you try to process it.

...
  |========================================                             |  59%
| Access information about the file "mytest.R" by using file.info().

> file.info("mytest.T")
         size isdir mode mtime ctime atime uid gid uname grname
mytest.T   NA    NA <NA>  <NA>  <NA>  <NA>  NA  NA  <NA>   <NA>

| Almost! Try again. Or, type info() for more options.

| file.info("mytest.R") will do the trick!

> file.info("mytest.R")
         size isdir mode               mtime               ctime
mytest.R    0 FALSE  644 2015-04-13 15:06:49 2015-04-13 15:06:49
                       atime uid gid           uname grname
mytest.R 2015-04-13 15:06:49 501  20 ashleyelizabeth  staff

| Perseverance, that's the answer.
  |==========================================                           |  61%
| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab
| specific items.

...
  |============================================                         |  63%
| Change the name of the file "mytest.R" to "mytest2.R" by using
| file.rename().

> file.rename("mytest.R", "mytest2.R")
[1] TRUE

| Excellent job!
  |=============================================                        |  66%
| Your operating system will provide simpler tools for these sorts of tasks,
| but having the ability to manipulate files programatically is useful. You
| might now try to delete mytest.R using file.remove('mytest.R'), but that
| won't work since mytest.R no longer exists. You have already renamed it.

...
  |===============================================                      |  68%
| Make a copy of "mytest2.R" called "mytest3.R" using file.copy().

> file.copy("mytest2.R")
Error in file.copy("mytest2.R") : 
  argument "to" is missing, with no default
> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

| Nice work!
  |=================================================                    |  71%
| You now have two files in the current directory. That may not seem very
| interesting. But what if you were working with dozens, or millions, of
| individual files? In that case, being able to programatically act on many
| files would be absolutely necessary. Don't forget that you can, temporarily,
| leave the lesson by typing play() and then return by typing nxt().

...
  |==================================================                   |  73%
| Provide the relative path to the file "mytest3.R" by using file.path().

> file.path()
character(0)

| One more time. You can do it! Or, type info() for more options.

| file.path("mytest3.R") works.

> file.path("mytest3.R")
[1] "mytest3.R"

| You're the best!
  |====================================================                 |  76%
| You can use file.path to construct file and directory paths that are
| independent of the operating system your R code is running on. Pass
| 'folder1' and 'folder2' as arguments to file.path to make a
| platform-independent pathname.

> file.path("mytest3.R", 'folder1', 'folder2')
[1] "mytest3.R/folder1/folder2"

| Almost! Try again. Or, type info() for more options.

| file.path("folder1", "folder2") works.

> file.path('folder1', 'folder2')
[1] "folder1/folder2"

| You're the best!
  |======================================================               |  78%
| Take a look at the documentation for dir.create by entering ?dir.create .
| Notice the 'recursive' argument. In order to create nested directories,
| 'recursive' must be set to TRUE.

> ?dir.create

| That's correct!
  |========================================================             |  80%
| Create a directory in the current working directory called "testdir2" and a
| subdirectory for it called "testdir3", all in one command by using
| dir.create() and file.path().

> dir.create(file.path(), 'testdir2', 'testdir3', recursive=TRUE)
Error in as.octmode(mode) : 'x' cannot be coerced to class "octmode"
> dir.create(file.path(), 'testdir2', 'testdir3')
Error in dir.create(file.path(), "testdir2", "testdir3") : 
  invalid 'path' argument
> dir.create('testdir2', 'testdir3')

| Not quite right, but keep trying. Or, type info() for more options.

| dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE) will do the
| trick. If you forgot the recursive argument, the command may have appeared
| to work, but it didn't create the nested directory.

> dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)

| You're the best!
  |=========================================================            |  83%
| To delete a directory you need to use the recursive = TRUE argument with the
| function unlink(). If you don't use recursive = TRUE, R is concerned that
| you're unaware that you're deleting a directory and all of its contents. R
| reasons that, if you don't specify that recursive equals TRUE, you don't
| know that something is in the directory you're trying to delete. R tries to
| prevent you from making a mistake.

...
  |===========================================================          |  85%
| Delete the "testdir2" directory that you created by using unlink().

> unlink('testdir2', recursive=T)

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| unlink("testdir2", recursive = TRUE) works.

> unlink('testdir2', recursive=TRUE)

| Your dedication is inspiring!
  |=============================================================        |  88%
| Why is this command named "unlink" rather than something more sensible like
| "dir.delete" or "dir.remove"? Mainly, history. unlink is the traditional
| Unix command for removing directories.

...
  |==============================================================       |  90%
| Go back to your original working directory using setwd(). (Recall that we
| created the variable old.dir with the full path for the orginal working
| directory at the start of these questions.)

> setwd(old.dir)

| You are really on a roll!
  |================================================================     |  93%
| It is often helpful to save the settings that you had before you began an
| analysis and then go back to them at the end. This trick is often used
| within functions; you save, say, the par() settings that you started with,
| mess around a bunch, and then set them back to the original values at the
| end. This isn't the same as what we have done here, but it seems similar
| enough to mention.

...
  |==================================================================   |  95%
| Delete the 'testdir' directory that you just left (and everything in it)

> unlink('testdir', recursive=TRUE)

| Keep working like that and you'll get there!
  |===================================================================  |  98%
| Take nothing but results. Leave nothing but assumptions. That sounds like
| 'Take nothing but pictures. Leave nothing but footprints.' But it makes no
| sense! Surely our readers can come up with a better motto . . .

...
  |=====================================================================| 100%
| In this lesson, you learned how to examine your R workspace and work with
| the file system of your machine from within R. Thanks for playing!

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013,
| Workspace_and_Files.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 3
  |                                                                     |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...
  |===                                                                  |   5%
| The simplest way to create a sequence of numbers in R is by using the `:`
| operator. Type 1:20 to see how it works.

> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are doing so well!
  |======                                                               |   9%
| That gave us every integer between (and including) 1 and 20. We could also
| use it to create a sequence of real numbers. For example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| Keep up the great work!
  |=========                                                            |  14%
| The result is a vector of real numbers starting with pi (3.142...) and
| increasing in increments of 1. The upper limit of 10 is never reached, since
| the next number in our sequence would be greater than 10.

...
  |=============                                                        |  18%
| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| Perseverance, that's the answer.
  |================                                                     |  23%
| It counted backwards in increments of 1! It's unlikely we'd want this
| behavior, but nonetheless it's good to know how it could happen.

...
  |===================                                                  |  27%
| Remember that if you have questions about a particular R function, you can
| access its documentation with a question mark followed by the function name:
| ?function_name_here. However, in the case of an operator like the colon used
| above, you must enclose the symbol in backticks like this: ?`:`. (NOTE: The
| backtick (`) key is generally located in the top left corner of a keyboard,
| above the Tab key. If you don't have a backtick key, you can use regular
| quotes.)

...
  |======================                                               |  32%
| Pull up the documentation for `:` now.

> ?`:`

| Excellent work!
  |=========================                                            |  36%
| Often, we'll desire more control over a sequence we're creating than what
| the `:` operator gives us. The seq() function serves this purpose.

...
  |============================                                         |  41%
| The most basic use of seq() does exactly the same thing as the `:` operator.
| Try seq(1, 20) to see this.

> seq(1,20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| That's the answer I was looking for.
  |===============================                                      |  45%
| This gives us the same output as 1:20. However, let's say that instead we
| want a vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0,
| 10, by=0.5) does just that. Try it out.

> seq(0,10, by0.5)
Error in seq.default(0, 10, by0.5) : object 'by0.5' not found
> seq(0,10, by=0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0
[16]  7.5  8.0  8.5  9.0  9.5 10.0

| You are amazing!
  |==================================                                   |  50%
| Or maybe we don't care what the increment is and we just want a sequence of
| 30 numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it a
| shot now and store the result in a new variable called my_seq.

> my_seq <- seq(5,10,length=30)

| Excellent work!
  |======================================                               |  55%
| To confirm that my_seq has length 30, we can use the length() function. Try
| it now.

> length(my_seq)
[1] 30

| Keep up the great work!
  |=========================================                            |  59%
| Let's pretend we don't know the length of my_seq, but we want to generate a
| sequence of integers from 1 to N, where N represents the length of the
| my_seq vector. In other words, we want a new vector (1, 2, 3, ...) that is
| the same length as my_seq.

...
  |============================================                         |  64%
| There are several ways we could do this. One possibility is to combine the
| `:` operator and the length() function like this: 1:length(my_seq). Give
| that a try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| You are really on a roll!
  |===============================================                      |  68%
| Another option is to use seq(along.with = my_seq). Give that a try.

> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| You got it!
  |==================================================                   |  73%
| However, as is the case with many common tasks, R has a separate built-in
| function for this purpose called seq_along(). Type seq_along(my_seq) to see
| it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30

| Great job!
  |=====================================================                |  77%
| There are often several approaches to solving the same problem, particularly
| in R. Simple approaches that involve less typing are generally best. It's
| also important for your code to be readable, so that you and others can
| figure out what's going on without too much hassle.

...
  |========================================================             |  82%
| If R has a built-in function for a particular task, it's likely that
| function is highly optimized for that purpose and is your best option. As
| you become a more advanced R programmer, you'll design your own functions to
| perform tasks when there are no better options. We'll explore writing your
| own functions in future lessons.

...
  |============================================================         |  86%
| One more function related to creating sequences of numbers is rep(), which
| stands for 'replicate'. Let's look at a few uses.

...
  |===============================================================      |  91%
| If we're interested in creating a vector that contains 40 zeros, we can use
| rep(0, times = 40). Try it out.

> rep(0,times=40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[38] 0 0 0

| You got it right!
  |==================================================================   |  95%
| If instead we want our vector to contain 10 repetitions of the vector (0, 1,
| 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.

> rep(c(0,1,2), times=10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| Keep up the great work!
  |=====================================================================| 100%
| Finally, let's say that rather than repeating the vector (0, 1, 2) over and
| over again, we want our vector to contain 10 zeros, then 10 ones, then 10
| twos. We can do this with the `each` argument. Try rep(c(0, 1, 2), each =
| 10).

> rep(c(0,1,2), each=10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| Perseverance, that's the answer.

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013,
| Sequences_of_Numbers.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 4
  |                                                                     |   0%

| The simplest and most common data structure in R is the vector.

...
  |==                                                                   |   3%
| Vectors come in two different flavors: atomic vectors and lists. An atomic
| vector contains exactly one data type, whereas a list may contain multiple
| data types. We'll explore atomic vectors further before we get to lists.

...
  |====                                                                 |   5%
| In previous lessons, we dealt entirely with numeric vectors, which are one
| type of atomic vector. Other types of atomic vectors include logical,
| character, integer, and complex. In this lesson, we'll take a closer look at
| logical and character vectors.

...
  |======                                                               |   8%
| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not
| available'). These values are generated as the result of logical
| 'conditions'. Let's experiment with some simple conditions.

...
  |=======                                                              |  11%
| First, create a numeric vector num_vect that contains the values 0.5, 55,
| -10, and 6.

> num_vect <- c(0.5, 55, -20, 6)

| Not quite! Try again. Or, type info() for more options.

| Recall that the c() function is used for creating a vector. If you forget
| how to use it, use ?c to access the help file. Don't forget to assign the
| result to a new variable called num_vect.

> num_vect <- c()0.5, 55,
Error: unexpected numeric constant in "num_vect <- c()0.5"
> | -10, and 6)
Error: unexpected '|' in "|"
> num_vect <- c()0.5, 55, -10, and 6)
Error: unexpected numeric constant in "num_vect <- c()0.5"
> num_vect <- c(0.5, 55, -10, and 6)
Error: unexpected numeric constant in "num_vect <- c(0.5, 55, -10, and 6"
> num_vect <- c(0.5, 55, -10, 6)

| Keep up the great work!
  |=========                                                            |  14%
| Now, create a variable called tf that gets the result of num_vect < 1, which
| is read as 'num_vect is less than 1'.

> tf <- num_vect < 1

| That's correct!
  |===========                                                          |  16%
| What do you think tf will look like?

1: a vector of 4 logical values
2: a single logical value

Selection: 1

| All that practice is paying off!
  |=============                                                        |  19%
| Print the contents of tf now.

> tf
[1]  TRUE FALSE  TRUE FALSE

| You are amazing!
  |===============                                                      |  22%
| The statement num_vect < 1 is a condition and tf tells us whether each
| corresponding element of our numeric vector num_vect satisfies this
| condition.

...
  |=================                                                    |  24%
| The first element of num_vect is 0.5, which is less than 1 and therefore the
| statement 0.5 < 1 is TRUE. The second element of num_vect is 55, which is
| greater than 1, so the statement 55 < 1 is FALSE. The same logic applies for
| the third and fourth elements.

...
  |===================                                                  |  27%
| Let's try another. Type num_vect >= 6 without assigning the result to a new
| variable.

> num_vect >= 6
[1] FALSE  TRUE FALSE  TRUE

| You nailed it! Good job!
  |=====================                                                |  30%
| This time, we are asking whether each individual element of num_vect is
| greater than OR equal to 6. Since only 55 and 6 are greater than or equal to
| 6, the second and fourth elements of the result are TRUE and the first and
| third elements are FALSE.

...
  |======================                                               |  32%
| The `<` and `>=` symbols in these examples are called 'logical operators'.
| Other logical operators include `>`, `<=`, `==` for exact equality, and `!=`
| for inequality.

...
  |========================                                             |  35%
| If we have two logical expressions, A and B, we can ask whether at least one
| is TRUE with A | B (logical 'or' a.k.a. 'union') or whether they are both
| TRUE with A & B (logical 'and' a.k.a. 'intersection'). Lastly, !A is the
| negation of A and is TRUE when A is FALSE and vice versa.

...
  |==========================                                           |  38%
| It's a good idea to spend some time playing around with various combinations
| of these logical operators until you get comfortable with their use. We'll
| do a few examples here to get you started.

...
  |============================                                         |  41%
| Try your best to predict the result of each of the following statements. You
| can use pencil and paper to work them out if it's helpful. If you get stuck,
| just guess and you've got a 50% chance of getting the right answer!

...
  |==============================                                       |  43%
| (3 > 5) & (4 == 4)

1: FALSE
2: TRUE

Selection: 1

| That's a job well done!
  |================================                                     |  46%
| (TRUE == TRUE) | (TRUE == FALSE)

1: TRUE
2: FALSE

Selection: 1

| You're the best!
  |==================================                                   |  49%
| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: FALSE
2: TRUE

Selection: 2

| That's correct!
  |===================================                                  |  51%
| Don't worry if you found these to be tricky. They're supposed to be. Working
| with logical statements in R takes practice, but your efforts will be
| rewarded in future lessons (e.g. subsetting and control structures).

...
  |=====================================                                |  54%
| Character vectors are also very common in R. Double quotes are used to
| distinguish character objects, as in the following example.

...
  |=======================================                              |  57%
| Create a character vector that contains the following words: "My", "name",
| "is". Remember to enclose each word in its own set of double quotes, so that
| R knows they are character strings. Store the vector in a variable called
| my_char.

> my_char <- c("My", "name", "is")

| You nailed it! Good job!
  |=========================================                            |  59%
| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| You nailed it! Good job!
  |===========================================                          |  62%
| Right now, my_char is a character vector of length 3. Let's say we want to
| join the elements of my_char together into one continuous character string
| (i.e. a character vector of length 1). We can do this using the paste()
| function.

...
  |=============================================                        |  65%
| Type paste(my_char, collapse = " ") now. Make sure there's a space between
| the double quotes in the `collapse` argument. You'll see why in a second.

> paste(my_char, collapse = " ")
[1] "My name is"

| All that practice is paying off!
  |===============================================                      |  68%
| The `collapse` argument to the paste() function tells R that when we join
| together the elements of the my_char character vector, we'd like to separate
| them with single spaces.

...
  |================================================                     |  70%
| It seems that we're missing something.... Ah, yes! Your name!

...
  |==================================================                   |  73%
| To add (or 'concatenate') your name to the end of my_char, use the c()
| function like this: c(my_char, "your_name_here"). Place your name in double
| quotes where I've put "your_name_here". Try it now, storing the result in a
| new variable called my_name.

> my_name <- c(my_char, "Ashley")

| You are doing so well!
  |====================================================                 |  76%
| Take a look at the contents of my_name.

> my_name
[1] "My"     "name"   "is"     "Ashley"

| You got it right!
  |======================================================               |  78%
| Now, use the paste() function once more to join the words in my_name
| together into a single character string. Don't forget to say collapse = " "!

> paste(my_name, collapse = " ")
[1] "My name is Ashley"

| You are quite good my friend!
  |========================================================             |  81%
| In this example, we used the paste() function to collapse the elements of a
| single character vector. paste() can also be used to join the elements of
| multiple character vectors.

...
  |==========================================================           |  84%
| In the simplest case, we can join two character vectors that are each of
| length 1 (i.e. join two words). Try paste("Hello", "world!", sep = " "),
| where the `sep` argument tells R that we want to separate the joined
| elements with a single space.

> paste("Hello", "world!", sep=" ")
[1] "Hello world!"

| Keep working like that and you'll get there!
  |============================================================         |  86%
| For a slightly more complicated example, we can join two vectors, each of
| length 3. Use paste() to join the integer vector 1:3 with the character
| vector c("X", "Y", "Z"). This time, use sep = "" to leave no space between
| the joined elements.

> paste(1:3, c("X", "Y", "Z"), sep="")
[1] "1X" "2Y" "3Z"

| Keep up the great work!
  |==============================================================       |  89%
| What do you think will happen if our vectors are of different length? (Hint:
| we talked about this in a previous lesson.)

...
  |===============================================================      |  92%
| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a
| predefined variable in R containing a character vector of all 26 letters in
| the English alphabet.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4"
[13] "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4"
[25] "Y-1" "Z-2"

| You nailed it! Good job!
  |=================================================================    |  95%
| Since the character vector LETTERS is longer than the numeric vector 1:4, R
| simply recycles, or repeats, 1:4 until it matches the length of LETTERS.

...
  |===================================================================  |  97%
| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a
| character vector by the paste() function.

...
  |=====================================================================| 100%
| We'll discuss coercion in another lesson, but all it really means that the
| numbers 1, 2, 3, and 4 in the output above are no longer numbers to R, but
| rather characters "1", "2", "3", and "4".

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 0

| Leaving swirl now. Type swirl() to resume.

> my_seq
 [1]  5.000000  5.172414  5.344828  5.517241  5.689655  5.862069  6.034483
 [8]  6.206897  6.379310  6.551724  6.724138  6.896552  7.068966  7.241379
[15]  7.413793  7.586207  7.758621  7.931034  8.103448  8.275862  8.448276
[22]  8.620690  8.793103  8.965517  9.137931  9.310345  9.482759  9.655172
[29]  9.827586 10.000000
> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did
| then. If you are new, call yourself something unique.

What shall I call you? Ashley

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 5
  |                                                                     |   0%

| Missing values play an important role in statistics and data analysis.
| Often, missing values must not be ignored, but rather they should be
| carefully studied to see if there's an underlying pattern or cause for their
| missingness.

...
  |====                                                                 |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing'
| (in the statistical sense). In this lesson, we'll explore missing values
| further.

...
  |=======                                                              |  11%
| Any operation involving NA generally yields NA as the result. To illustrate,
| let's create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| You nailed it! Good job!
  |===========                                                          |  16%
| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| You are really on a roll!
  |===============                                                      |  21%
| Notice that the elements of the resulting vector that correspond with the NA
| values in x are also NA.

...
  |==================                                                   |  26%
| To make things a little more interesting, lets create a vector containing
| 1000 draws from a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| Nice work!
  |======================                                               |  32%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| You are quite good my friend!
  |=========================                                            |  37%
| Finally, let's select 100 elements at random from these 2000 values
| (combining y and z) such that we don't know how many NAs we'll wind up with
| or what positions they'll occupy in our final vector -- my_data <-
| sample(c(y, z), 100).

> my_data <- sample(c(y,z), 100)

| You are quite good my friend!
  |=============================                                        |  42%
| Let's first ask the question of where our NAs are located in our data. The
| is.na() function tells us whether each element of a vector is NA. Call
| is.na() on my_data and assign the result to my_na.

> my_na <- is.na(my_data)

| Keep up the great work!
  |=================================                                    |  47%
| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
 [13] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
 [25] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE
 [37]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE
 [49] FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
 [61]  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE
 [73] FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE
 [85]  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE
 [97]  TRUE  TRUE FALSE  TRUE

| That's a job well done!
  |====================================                                 |  53%
| Everywhere you see a TRUE, you know the corresponding element of my_data is
| NA. Likewise, everywhere you see a FALSE, you know the corresponding element
| of my_data is one of our random draws from the standard normal distribution.

...
  |========================================                             |  58%
| In our previous discussion of logical operators, we introduced the `==`
| operator as a method of testing for equality between two objects. So, you
| might think the expression my_data == NA yields the same results as is.na().
| Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [25] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [49] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [73] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [97] NA NA NA NA

| Keep working like that and you'll get there!
  |============================================                         |  63%
| The reason you got a vector of all NAs is that NA is not really a value, but
| just a placeholder for a quantity that is not available. Therefore the
| logical expression is incomplete and R has no choice but to return a vector
| of the same length as my_data that contains all NAs.

...
  |===============================================                      |  68%
| Don't worry if that's a little confusing. The key takeaway is to be cautious
| when using logical expressions anytime NAs might creep in, since a single NA
| value can derail the entire thing.

...
  |===================================================                  |  74%
| So, back to the task at hand. Now that we have a vector, my_na, that has a
| TRUE for every NA and FALSE for every numeric value, we can compute the
| total number of NAs in our data.

...
  |======================================================               |  79%
| The trick is to recognize that underneath the surface, R represents TRUE as
| the number 1 and FALSE as the number 0. Therefore, if we take the sum of a
| bunch of TRUEs and FALSEs, we get the total number of TRUEs.

...
  |==========================================================           |  84%
| Let's give that a try here. Call the sum() function on my_na to count the
| total number of TRUEs in my_na, and thus the total number of NAs in my_data.
| Don't assign the result to a new variable.

> sum(my_na)
[1] 53

| Nice work!
  |==============================================================       |  89%
| Pretty cool, huh? Finally, let's take a look at the data to convince
| ourselves that everything 'adds up'. Print my_data to the console.

> my_data
  [1]          NA          NA          NA          NA          NA  0.35878407
  [7]          NA  0.39724295 -0.05638271          NA          NA          NA
 [13]  0.55367266  0.11700032 -0.66138202  0.04693140  0.44259000  0.28467117
 [19]          NA          NA          NA          NA  1.23819621 -0.36002961
 [25] -0.41058454          NA -0.06341461          NA -1.53149660          NA
 [31]          NA  1.99333833 -0.70082694  0.04514872  1.16644395          NA
 [37]          NA -0.84112283          NA          NA          NA          NA
 [43]          NA -2.08079058 -0.88493934          NA  1.63722052  1.38482205
 [49] -0.39557082          NA -2.24974167 -0.12376468          NA -1.30731697
 [55]          NA          NA          NA          NA  0.61173885          NA
 [61]          NA -0.21273708          NA -0.05780802  1.35733804 -1.00421895
 [67]  0.84425922  0.64352619          NA  0.60131383          NA -0.07157610
 [73]  1.62630331          NA  0.78782505          NA  0.64189012          NA
 [79]          NA -0.11957444          NA          NA          NA          NA
 [85]          NA -1.63343151 -0.75418085 -0.92009397          NA -1.56345404
 [91]          NA          NA  0.04825447          NA          NA -1.69456265
 [97]          NA          NA -1.29076270          NA

| You are really on a roll!
  |=================================================================    |  95%
| Now that we've got NAs down pat, let's look at a second type of missing
| value -- NaN, which stands for 'not a number'. To generate NaN, try dividing
| (using a forward slash) 0 by 0 now.

> 0/0
[1] NaN

| Perseverance, that's the answer.
  |=====================================================================| 100%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens
| if you subtract Inf from Inf?

> Inf - Inf
[1] NaN

| Excellent job!

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Missing_Values.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 6
  |                                                                     |   0%

| In this lesson, we'll see how to extract elements from a vector based on
| some conditions that we specify.

...
  |==                                                                   |   3%
| For example, we may only be interested in the first 20 elements of a vector,
| or only the elements that are not NA, or only those that are positive or
| correspond to a specific variable of interest. By the end of this lesson,
| you'll know how to handle each of these scenarios.

...
  |====                                                                 |   5%
| I've created for you a vector called x that contains a random ordering of 20
| numbers (from a standard normal distribution) and 20 NAs. Type x now to see
| what it looks like.

> x
 [1]         NA         NA         NA         NA         NA         NA
 [7]  0.3465295         NA         NA -0.3865641         NA  1.0942015
[13]         NA         NA  0.5914388         NA         NA -0.1711303
[19]  1.7166212  0.9937802 -1.6914166  0.9103103         NA -0.3031644
[25]  0.5915482  0.3332551  1.3393657 -1.3645609  1.1819987         NA
[31]  2.2173788 -3.0760816         NA  0.4235784 -0.2690804         NA
[37]         NA         NA  0.4132649         NA

| Great job!
  |=====                                                                |   8%
| The way you tell R that you want to select some particular elements (i.e. a
| 'subset') from a vector is by placing an 'index vector' in square brackets
| immediately following the name of the vector.

...
  |=======                                                              |  11%
| For a simple example, try x[1:10] to view the first ten elements of x.

> x[1:10]
 [1]         NA         NA         NA         NA         NA         NA
 [7]  0.3465295         NA         NA -0.3865641

| Your dedication is inspiring!
  |=========                                                            |  13%
| Index vectors come in four different flavors -- logical vectors, vectors of
| positive integers, vectors of negative integers, and vectors of character
| strings -- each of which we'll cover in this lesson.

...
  |===========                                                          |  16%
| Let's start by indexing with logical vectors. One common scenario when
| working with real-world data is that we want to extract all elements of a
| vector that are not NA (i.e. missing data). Recall that is.na(x) yields a
| vector of logical values the same length as x, with TRUEs corresponding to
| NA values in x and FALSEs corresponding to non-NA values in x.

...
  |=============                                                        |  18%
| What do you think x[is.na(x)] will give you?

1: A vector with no NAs
2: A vector of TRUEs and FALSEs
3: A vector of length 0
4: A vector of all NAs

Selection: 2

| Almost! Try again.

| Remember that is.na(x) tells us where the NAs are in a vector. So if we
| subset x based on that, what do you expect to happen?

1: A vector of length 0
2: A vector of all NAs
3: A vector with no NAs
4: A vector of TRUEs and FALSEs

Selection: 2

| You got it right!
  |===============                                                      |  21%
| Prove it to yourself by typing x[is.na(x)].

> x[is.na(x)]
 [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You got it right!
  |================                                                     |  24%
| Recall that `!` gives us the negation of a logical expression, so !is.na(x)
| can be read as 'is not NA'. Therefore, if we want to create a vector called
| y that contains all of the non-NA values from x, we can use y <-
| x[!is.na(x)]. Give it a try.

> y <- x[!is.na(x)]

| Excellent job!
  |==================                                                   |  26%
| Print y to the console.

> y
 [1]  0.3465295 -0.3865641  1.0942015  0.5914388 -0.1711303  1.7166212
 [7]  0.9937802 -1.6914166  0.9103103 -0.3031644  0.5915482  0.3332551
[13]  1.3393657 -1.3645609  1.1819987  2.2173788 -3.0760816  0.4235784
[19] -0.2690804  0.4132649

| That's the answer I was looking for.
  |====================                                                 |  29%
| Now that we've isolated the non-missing values of x and put them in y, we
| can subset y as we please.

...
  |======================                                               |  32%
| Recall that the expression y > 0 will give us a vector of logical values the
| same length as y, with TRUEs corresponding to values of y that are greater
| than zero and FALSEs corresponding to values of y that are less than or
| equal to zero. What do you think y[y > 0] will give you?

1: A vector of all NAs
2: A vector of all the negative elements of y
3: A vector of length 0
4: A vector of all the positive elements of y
5: A vector of TRUEs and FALSEs

Selection: 4

| Perseverance, that's the answer.
  |========================                                             |  34%
| Type y[y > 0] to see that we get all of the positive elements of y, which
| are also the positive elements of our original vector x.

> y[y>0]
 [1] 0.3465295 1.0942015 0.5914388 1.7166212 0.9937802 0.9103103 0.5915482
 [8] 0.3332551 1.3393657 1.1819987 2.2173788 0.4235784 0.4132649

| That's a job well done!
  |=========================                                            |  37%
| You might wonder why we didn't just start with x[x > 0] to isolate the
| positive elements of x. Try that now to see why.

> x[x>0]
 [1]        NA        NA        NA        NA        NA        NA 0.3465295
 [8]        NA        NA        NA 1.0942015        NA        NA 0.5914388
[15]        NA        NA 1.7166212 0.9937802 0.9103103        NA 0.5915482
[22] 0.3332551 1.3393657 1.1819987        NA 2.2173788        NA 0.4235784
[29]        NA        NA        NA 0.4132649        NA

| You are doing so well!
  |===========================                                          |  39%
| Since NA is not a value, but rather a placeholder for an unknown quantity,
| the expression NA > 0 evaluates to NA. Hence we get a bunch of NAs mixed in
| with our positive numbers when we do this.

...
  |=============================                                        |  42%
| Combining our knowledge of logical operators with our new knowledge of
| subsetting, we could do this -- x[!is.na(x) & x > 0]. Try it out.

> x[!is.na(x) & x > 0]
 [1] 0.3465295 1.0942015 0.5914388 1.7166212 0.9937802 0.9103103 0.5915482
 [8] 0.3332551 1.3393657 1.1819987 2.2173788 0.4235784 0.4132649

| You got it!
  |===============================                                      |  45%
| In this case, we request only values of x that are both non-missing AND
| greater than zero.

...
  |=================================                                    |  47%
| I've already shown you how to subset just the first ten values of x using
| x[1:10]. In this case, we're providing a vector of positive integers inside
| of the square brackets, which tells R to return only the elements of x
| numbered 1 through 10.

...
  |==================================                                   |  50%
| Many programming languages use what's called 'zero-based indexing', which
| means that the first element of a vector is considered element 0. R uses
| 'one-based indexing', which (you guessed it!) means the first element of a
| vector is considered element 1.

...
  |====================================                                 |  53%
| Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint
| -- Use the c() function to specify the element numbers as a numeric vector.

> x[c(3,5,7)]
[1]        NA        NA 0.3465295

| Keep working like that and you'll get there!
  |======================================                               |  55%
| It's important that when using integer vectors to subset our vector x, we
| stick with the set of indexes {1, 2, ..., 40} since x only has 40 elements.
| What happens if we ask for the zeroth element of x (i.e. x[0])? Give it a
| try.

> x[0]
numeric(0)

| You got it!
  |========================================                             |  58%
| As you might expect, we get nothing useful. Unfortunately, R doesn't prevent
| us from doing this. What if we ask for the 3000th element of x? Try it out.

> x[3000]
[1] NA

| All that hard work is paying off!
  |==========================================                           |  61%
| Again, nothing useful, but R doesn't prevent us from asking for it. This
| should be a cautionary tale. You should always make sure that what you are
| asking for is within the bounds of the vector you're working with.

...
  |============================================                         |  63%
| What if we're interested in all elements of x EXCEPT the 2nd and 10th? It
| would be pretty tedious to construct a vector containing all numbers 1
| through 40 EXCEPT 2 and 10.

...
  |=============================================                        |  66%
| Luckily, R accepts negative integer indexes. Whereas x[c(2, 10)] gives us
| ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of
| x EXCEPT for the 2nd and 10 elements.  Try x[c(-2, -10)] now to see this.

> x[!c(2,10)]
numeric(0)

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Give x[c(-2, -10)] a try.

> x[(-2,-10)]
Error: unexpected ',' in "x[(-2,"
> x[!(2,10)]
Error: unexpected ',' in "x[!(2,"
> x[c(-2,-10)]
 [1]         NA         NA         NA         NA         NA  0.3465295
 [7]         NA         NA         NA  1.0942015         NA         NA
[13]  0.5914388         NA         NA -0.1711303  1.7166212  0.9937802
[19] -1.6914166  0.9103103         NA -0.3031644  0.5915482  0.3332551
[25]  1.3393657 -1.3645609  1.1819987         NA  2.2173788 -3.0760816
[31]         NA  0.4235784 -0.2690804         NA         NA         NA
[37]  0.4132649         NA

| Excellent job!
  |===============================================                      |  68%
| A shorthand way of specifying multiple negative numbers is to put the
| negative sign out in front of the vector of positive numbers. Type x[-c(2,
| 10)] to get the exact same result.

> x[-c(2,10)]
 [1]         NA         NA         NA         NA         NA  0.3465295
 [7]         NA         NA         NA  1.0942015         NA         NA
[13]  0.5914388         NA         NA -0.1711303  1.7166212  0.9937802
[19] -1.6914166  0.9103103         NA -0.3031644  0.5915482  0.3332551
[25]  1.3393657 -1.3645609  1.1819987         NA  2.2173788 -3.0760816
[31]         NA  0.4235784 -0.2690804         NA         NA         NA
[37]  0.4132649         NA

| All that hard work is paying off!
  |=================================================                    |  71%
| So far, we've covered three types of index vectors -- logical, positive
| integer, and negative integer. The only remaining type requires us to
| introduce the concept of 'named' elements.

...
  |===================================================                  |  74%
| Create a numeric vector with three named elements using vect <- c(foo = 11,
| bar = 2, norf = NA).

> vect <- c(foo=11, bar=2, norf=NA)

| All that practice is paying off!
  |=====================================================                |  76%
| When we print vect to the console, you'll see that each element has a name.
| Try it out.

> vect
 foo  bar norf 
  11    2   NA 

| All that practice is paying off!
  |======================================================               |  79%
| We can also get the names of vect by passing vect as an argument to the
| names() function. Give that a try.

> names(vect)
[1] "foo"  "bar"  "norf"

| Nice work!
  |========================================================             |  82%
| Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do
| that now.

> vect2 <- c(11,2,NA)

| You are amazing!
  |==========================================================           |  84%
| Then, we can add the `names` attribute to vect2 after the fact with
| names(vect2) <- c("foo", "bar", "norf"). Go ahead.

> names(vect2) <- c("foo", "bar", "norf")

| That's the answer I was looking for.
  |============================================================         |  87%
| Now, let's check that vect and vect2 are the same by passing them as
| arguments to the identical() function.

> identical(vect, vect2)
[1] TRUE

| You are really on a roll!
  |==============================================================       |  89%
| Indeed, vect and vect2 are identical named vectors.

...
  |================================================================     |  92%
| Now, back to the matter of subsetting a vector by named elements. Which of
| the following commands do you think would give us the second element of
| vect?

1: vect[bar]
2: vect["bar"]
3: vect["2"]

Selection: 2

| That's a job well done!
  |=================================================================    |  95%
| Now, try it out.

> vect["bar"]
bar 
  2 

| That's correct!
  |===================================================================  |  97%
| Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try
| it out.

> vect[c("foo","bar")]
foo bar 
 11   2 

| You are doing so well!
  |=====================================================================| 100%
| Now you know all four methods of subsetting data from vectors. Different
| approaches are best in different scenarios and when in doubt, try it out!

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013,
| Subsetting_Vectors.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 0

| Leaving swirl now. Type swirl() to resume.

> x <- c('a','b','c','d')
> for letter in x {}
Error: unexpected symbol in "for letter"
> for (letter in x) {}
> for (letter in x) {print(letter)}
[1] "a"
[1] "b"
[1] "c"
[1] "d"
> for letter in x {print(letter)}
Error: unexpected symbol in "for letter"
> for (letter in x) print(letter)
[1] "a"
[1] "b"
[1] "c"
[1] "d"
> load("myFirstFunction.R")
Error: bad restore file magic number (file may be corrupted) -- no data loaded
In addition: Warning message:
file ‘myFirstFunction.R’ has magic number 'add2 '
  Use of save versions prior to 2 is deprecated 
> source("myFirstFunction.R")
> above(15)
[1] 15
> above(6)
numeric(0)
> columnmean(data)
[1]  42.129310 185.931507   9.957516  77.882353   6.993464  15.803922
> #R uses "lazy evaluation" (things are only evaluated as needed)
> #"..." argument indicates a variable number of arguments
> swirl()

| Welcome to swirl!

| Please sign in. If you've been here before, use the same name as you did
| then. If you are new, call yourself something unique.

What shall I call you? Ashley

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 7
  |                                                                     |   0%

| In this lesson, we'll cover matrices and data frames. Both represent
| 'rectangular' data types, meaning that they are used to store tabular data,
| with rows and columns.

...
  |==                                                                   |   3%
| The main difference, as you'll see, is that matrices can only contain a
| single class of data, while data frames can consist of many different
| classes of data.

...
  |====                                                                 |   6%
| Let's create a vector containing the numbers 1 through 20 using the `:`
| operator. Store the result in a variable called my_vector.

> my_vector <- 1:20

| You're the best!
  |======                                                               |   9%
| View the contents of the vector you just created.

> my_vector
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| Keep up the great work!
  |========                                                             |  11%
| The dim() function tells us the 'dimensions' of an object. What happens if
| we do dim(my_vector)? Give it a try.

> dim(my_vector)
NULL

| Perseverance, that's the answer.
  |==========                                                           |  14%
| Clearly, that's not very helpful! Since my_vector is a vector, it doesn't
| have a `dim` attribute (so it's just NULL), but we can find its length using
| the length() function. Try that now.

> length(my_vector)
[1] 20

| That's the answer I was looking for.
  |============                                                         |  17%
| Ah! That's what we wanted. But, what happens if we give my_vector a `dim`
| attribute? Let's give it a try. Type dim(my_vector) <- c(4, 5).

> dim(my_vector) <- c(4,5)

| That's a job well done!
  |==============                                                       |  20%
| It's okay if that last command seemed a little strange to you. It should!
| The dim() function allows you to get OR set the `dim` attribute for an R
| object. In this case, we assigned the value c(4, 5) to the `dim` attribute
| of my_vector.

...
  |================                                                     |  23%
| Use dim(my_vector) to confirm that we've set the `dim` attribute correctly.

> dim(my_vector)
[1] 4 5

| You're the best!
  |==================                                                   |  26%
| Another way to see this is by calling the attributes() function on
| my_vector. Try it now.

> attributes(my_vector)
$dim
[1] 4 5


| Your dedication is inspiring!
  |====================                                                 |  29%
| Just like in math class, when dealing with a 2-dimensional object (think
| rectangular table), the first number is the number of rows and the second is
| the number of columns. Therefore, we just gave my_vector 4 rows and 5
| columns.

...
  |======================                                               |  31%
| But, wait! That doesn't sound like a vector any more. Well, it's not. Now
| it's a matrix. View the contents of my_vector now to see what it looks like.

> my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20

| All that practice is paying off!
  |========================                                             |  34%
| Now, let's confirm it's actually a matrix by using the class() function.
| Type class(my_vector) to see what I mean.

> class(my_vector)
[1] "matrix"

| All that practice is paying off!
  |==========================                                           |  37%
| Sure enough, my_vector is now a matrix. We should store it in a new variable
| that helps us remember what it is. Store the value of my_vector in a new
| variable called my_matrix.

> my_matrix <- my_vector

| You're the best!
  |============================                                         |  40%
| The example that we've used so far was meant to illustrate the point that a
| matrix is simply an atomic vector with a dimension attribute. A more direct
| method of creating the same matrix uses the matrix() function.

...
  |==============================                                       |  43%
| Bring up the help file for the matrix() function now using the `?` function.

> matrix?
+ 
+ ?matrix
Error in help.search("matrix", fields = "matrix", package = NULL) : 
  incorrect field specification
> ?matrix

| All that practice is paying off!
  |================================                                     |  46%
| Now, look at the documentation for the matrix function and see if you can
| figure out how to create a matrix containing the same numbers (1-20) and
| dimensions (4 rows, 5 columns) by calling the matrix() function. Store the
| result in a variable called my_matrix2.

> my_matrix2 <- matrix(1:20)

| Not quite right, but keep trying. Or, type info() for more options.

| Call the matrix() function with three arguments -- 1:20, the number of rows,
| and the number of columns. Be sure to specify arguments by their proper
| names and store the result in my_matrix2 (not in my_matrix).

> my_matrix2 <- matrix(1:20, 4, 5)

| You are doing so well!
  |==================================                                   |  49%
| Finally, let's confirm that my_matrix and my_matrix2 are actually identical.
| The identical() function will tell us if its first two arguments are the
| same. Try it out.

> identical(my_matrix, my_matrix2)
[1] TRUE

| You are doing so well!
  |===================================                                  |  51%
| Now, imagine that the numbers in our table represent some measurements from
| a clinical experiment, where each row represents one patient and each column
| represents one variable for which measurements were taken.

...
  |=====================================                                |  54%
| We may want to label the rows, so that we know which numbers belong to each
| patient in the experiment. One way to do this is to add a column to the
| matrix, which contains the names of all four people.

...
  |=======================================                              |  57%
| Let's start by creating a character vector containing the names of our
| patients -- Bill, Gina, Kelly, and Sean. Remember that double quotes tell R
| that something is a character string. Store the result in a variable called
| patients.

> patients <- c("Bill", "Gina", "Kelly", "Sean")

| You got it right!
  |=========================================                            |  60%
| Now we'll use the cbind() function to 'combine columns'. Don't worry about
| storing the result in a new variable. Just call cbind() with two arguments
| -- the patients vector and my_matrix.

> cbind(patients, my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

| All that practice is paying off!
  |===========================================                          |  63%
| Something is fishy about our result! It appears that combining the character
| vector with our matrix of numbers caused everything to be enclosed in double
| quotes. This means we're left with a matrix of character strings, which is
| no good.

...
  |=============================================                        |  66%
| If you remember back to the beginning of this lesson, I told you that
| matrices can only contain ONE class of data. Therefore, when we tried to
| combine a character vector with a numeric matrix, R was forced to 'coerce'
| the numbers to characters, hence the double quotes.

...
  |===============================================                      |  69%
| This is called 'implicit coercion', because we didn't ask for it. It just
| happened. But why didn't R just convert the names of our patients to
| numbers? I'll let you ponder that question on your own.

...
  |=================================================                    |  71%
| So, we're still left with the question of how to include the names of our
| patients in the table without destroying the integrity of our numeric data.
| Try the following -- my_data <- data.frame(patients, my_matrix)

> my_data <- data.frame(patients, my_matrix)

| You are amazing!
  |===================================================                  |  74%
| Now view the contents of my_data to see what we've come up with.

> my_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

| Perseverance, that's the answer.
  |=====================================================                |  77%
| It looks like the data.frame() function allowed us to store our character
| vector of names right alongside our matrix of numbers. That's exactly what
| we were hoping for!

...
  |=======================================================              |  80%
| Behind the scenes, the data.frame() function takes any number of arguments
| and returns a single object of class `data.frame` that is composed of the
| original objects.

...
  |=========================================================            |  83%
| Let's confirm this by calling the class() function on our newly created data
| frame.

> class(my_data)
[1] "data.frame"

| All that practice is paying off!
  |===========================================================          |  86%
| It's also possible to assign names to the individual rows and columns of a
| data frame, which presents another possible way of determining which row of
| values in our table belongs to each patient.

...
  |=============================================================        |  89%
| However, since we've already solved that problem, let's solve a different
| problem by assigning names to the columns of our data frame so that we know
| what type of measurement each column represents.

...
  |===============================================================      |  91%
| Since we have six columns (including patient names), we'll need to first
| create a vector containing one element for each column. Create a character
| vector called cnames that contains the following values (in order) --
| "patient", "age", "weight", "bp", "rating", "test".

> cnames <- c("patient", "age", "weight", "bp", "rating", "test")

| Keep working like that and you'll get there!
  |=================================================================    |  94%
| Now, use the colnames() function to set the `colnames` attribute for our
| data frame. This is similar to the way we used the dim() function earlier in
| this lesson.

> colnames(my_data) <- cnames

| You are really on a roll!
  |===================================================================  |  97%
| Let's see if that got the job done. Print the contents of my_data.

> my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

| All that practice is paying off!
  |=====================================================================| 100%
| In this lesson, you learned the basics of working with two very important
| and common data structures -- matrices and data frames. There's much more to
| learn and we'll be covering more advanced topics, particularly with respect
| to data frames, in future lessons.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013,
| Matrices_and_Data_Frames.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 8
  |                                                                     |   0%

| This lesson is meant to be a short introduction to logical operations in R.

...
  |=                                                                    |   2%
| There are two logical values in R, also called boolean values. They are TRUE
| and FALSE. In R you can construct logical expressions which will evaluate to
| either TRUE or FALSE.

...
  |===                                                                  |   4%
| Many of the questions in this lesson will involve evaluating logical
| expressions. It may be useful to open up a second R terminal where you can
| experiment with some of these expressions.

...
  |====                                                                 |   6%
| Creating logical expressions requires logical operators. You're probably
| familiar with arithmetic operators like `+`, `-`, `*`, and `/`. The first
| logical operator we are going to discuss is the equality operator,
| represented by two equals signs `==`. Use the equality operator below to
| find out if TRUE is equal to TRUE.

> TRUE == TRUE
[1] TRUE

| You are quite good my friend!
  |=====                                                                |   8%
| Just like arithmetic, logical expressions can be grouped by parenthesis so
| that the entire expression (TRUE == TRUE) == TRUE evaluates to TRUE.

...
  |=======                                                              |  10%
| To test out this property, try evaluating (FALSE == TRUE) == FALSE .

> (FALSE == TRUE) == FALSE
[1] TRUE

| All that hard work is paying off!
  |========                                                             |  12%
| The equality operator can also be used to compare numbers. Use `==` to see
| if 6 is equal to 7.

> 6 == 7
[1] FALSE

| Your dedication is inspiring!
  |=========                                                            |  14%
| The previous expression evaluates to FALSE because 6 is less than 7.
| Thankfully, there are inequality operators that allow us to test if a value
| is less than or greater than another value.

...
  |===========                                                          |  16%
| The less than operator `<` tests whether the number on the left side of the
| operator (called the left operand) is less than the number on the right side
| of the operator (called the right operand). Write an expression to test
| whether 6 is less than 7.

> 6 < 7
[1] TRUE

| That's a job well done!
  |============                                                         |  18%
| There is also a less-than-or-equal-to operator `<=` which tests whether the
| left operand is less than or equal to the right operand. Write an expression
| to test whether 10 is less than or equal to 10.

> 10 <= 10
[1] TRUE

| You're the best!
  |==============                                                       |  20%
| Keep in mind that there are the corresponding greater than `>` and
| greater-than-or-equal-to `>=` operators.

...
  |===============                                                      |  22%
| Which of the following evaluates to FALSE?

1: 9 >= 10
2: 6 < 8
3: 0 > -36
4: 7 == 7

Selection: 1

| You are quite good my friend!
  |================                                                     |  24%
| Which of the following evaluates to TRUE?

1: -6 > -7
2: 9 >= 10
3: 7 == 9
4: 57 < 8

Selection: 1

| You're the best!
  |==================                                                   |  25%
| The next operator we will discuss is the 'not equals' operator represented
| by `!=`. Not equals tests whether two values are unequal, so TRUE != FALSE
| evaluates to TRUE. Like the equality operator, `!=` can also be used with
| numbers. Try writing an expression to see if 5 is not equal to 7.

> 5 != 7
[1] TRUE

| Excellent job!
  |===================                                                  |  27%
| In order to negate boolean expressions you can use the NOT operator. An
| exclamation point `!` will cause !TRUE (say: not true) to evaluate to FALSE
| and !FALSE (say: not false) to evaluate to TRUE. Try using the NOT operator
| and the equals operator to find the opposite of whether 5 is equal to 7.

> !(5 == 7)
[1] TRUE

| Excellent work!
  |====================                                                 |  29%
| Let's take a moment to review. The equals operator `==` tests whether two
| boolean values or numbers are equal, the not equals operator `!=` tests
| whether two boolean values or numbers are unequal, and the NOT operator `!`
| negates logical expressions so that TRUE expressions become FALSE and FALSE
| expressions become TRUE.

...
  |======================                                               |  31%
| Which of the following evaluates to FALSE?

1: !(0 >= -1)
2: 7 != 8
3: 9 < 10
4: !FALSE

Selection: 1

| You're the best!
  |=======================                                              |  33%
| What do you think the following expression will evaluate to?: (TRUE !=
| FALSE) == !(6 == 7)

1: %>%
2: TRUE
3: FALSE
4: Can there be objective truth when programming?

Selection: 2

| Excellent work!
  |========================                                             |  35%
| At some point you may need to examine relationships between multiple logical
| expressions. This is where the AND operator and the OR operator come in.

...
  |==========================                                           |  37%
| Let's look at how the AND operator works. There are two AND operators in R,
| `&` and `&&`. Both operators work similarly, if the right and left operands
| of AND are both TRUE the entire expression is TRUE, otherwise it is FALSE.
| For example, TRUE & TRUE evaluates to TRUE. Try typing FALSE & FALSE to how
| it is evaluated.

> FALSE & FALSE
[1] FALSE

| Great job!
  |===========================                                          |  39%
| You can use the `&` operator to evaluate AND across a vector. The `&&`
| version of AND only evaluates the first member of a vector. Let's test both
| for practice. Type the expression TRUE & c(TRUE, FALSE, FALSE).

> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE

| That's correct!
  |============================                                         |  41%
| What happens in this case is that the left operand `TRUE` is recycled across
| every element in the vector of the right operand. This is the equivalent
| statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

...
  |==============================                                       |  43%
| Now we'll type the same expression except we'll use the `&&` operator. Type
| the expression TRUE && c(TRUE, FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE

| You are doing so well!
  |===============================                                      |  45%
| In this case, the left operand is only evaluated with the first member of
| the right operand (the vector). The rest of the elements in the vector
| aren't evaluated at all in this expression.

...
  |================================                                     |  47%
| The OR operator follows a similar set of rules. The `|` version of OR
| evaluates OR across an entire vector, while the `||` version of OR only
| evaluates the first member of a vector.

...
  |==================================                                   |  49%
| An expression using the OR operator will evaluate to TRUE if the left
| operand or the right operand is TRUE. If both are TRUE, the expression will
| evaluate to TRUE, however if neither are TRUE, then the expression will be
| FALSE.

...
  |===================================                                  |  51%
| Let's test out the vectorized version of the OR operator. Type the
| expression TRUE | c(TRUE, FALSE, FALSE).

> TRUE | c(TRUE, FALSE, FALSE)
[1] TRUE TRUE TRUE

| Nice work!
  |=====================================                                |  53%
| Now let's try out the non-vectorized version of the OR operator. Type the
| expression TRUE || c(TRUE, FALSE, FALSE).

> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

| That's the answer I was looking for.
  |======================================                               |  55%
| Logical operators can be chained together just like arithmetic operators.
| The expressions: `6 != 10 && FALSE && 1 >= 2` or `TRUE || 5 < 9.3 || FALSE`
| are perfectly normal to see.

...
  |=======================================                              |  57%
| As you may recall, arithmetic has an order of operations and so do logical
| expressions. All AND operators are evaluated before OR operators. Let's look
| at an example of an ambiguous case. Type: 5 > 8 || 6 != 8 && 4 > 3.9

> 5 > 8 || 6 != 8 && 4 > 3.9 # F || T && T --> F || T --> T
[1] TRUE

| Keep up the great work!
  |=========================================                            |  59%
| Let's walk through the order of operations in the above case. First the left
| and right operands of the AND operator are evaluated. 6 is not equal 8, 4 is
| greater than 3.9, therefore both operands are TRUE so the resulting
| expression `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR
| operator is evaluated: 5 is not greater than 8 so the entire expression is
| reduced to FALSE || TRUE. Since the right operand of this expression is TRUE
| the entire expression evaluates to TRUE.

...
  |==========================================                           |  61%
| Which one of the following expressions evaluates to TRUE?

1: TRUE && 62 < 62 && 44 >= 44
2: FALSE || TRUE && FALSE
3: TRUE && FALSE || 9 >= 4 && 3 < 6
4: 99.99 > 100 || 45 < 7.3 || 4 != 4.0

Selection: 3

| Nice work!
  |===========================================                          |  63%
| Which one of the following expressions evaluates to FALSE?

1: !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
2: FALSE || TRUE && 6 != 4 || 9 > 4
3: FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
4: 6 >= -9 && !(6 > 7) && !(!TRUE)

Selection: 3

| Great job!
  |=============================================                        |  65%
| Now that you're familiar with R's logical operators you can take advantage
| of a few functions that R provides for dealing with logical expressions.

...
  |==============================================                       |  67%
| The function isTRUE() takes one argument. If that argument evaluates to
| TRUE, the function will return TRUE. Otherwise, the function will return
| FALSE. Try using this function by typing: isTRUE(6 > 4)

> isTRUE(6 > 4)
[1] TRUE

| That's correct!
  |===============================================                      |  69%
| Which of the following evaluates to TRUE?

1: isTRUE(3)
2: isTRUE(!TRUE)
3: isTRUE(NA)
4: !isTRUE(4 < 3)
5: !isTRUE(8 != 5)

Selection: 4

| You are amazing!
  |=================================================                    |  71%
| The function identical() will return TRUE if the two R objects passed to it
| as arguments are identical. Try out the identical() function by typing:
| identical('twins', 'twins')

> identical('twins', 'twins')
[1] TRUE

| Your dedication is inspiring!
  |==================================================                   |  73%
| Which of the following evaluates to TRUE?

1: identical(4, 3.1)
2: identical('hello', 'Hello')
3: identical(5 > 4, 3 < 3.1)
4: !identical(7, 7)

Selection: 3

| That's the answer I was looking for.
  |===================================================                  |  75%
| You should also be aware of the xor() function, which takes two arguments.
| The xor() function stands for exclusive OR. If one argument evaluates to
| TRUE and one argument evaluates to FALSE, then this function will return
| TRUE, otherwise it will return FALSE. Try out the xor() function by typing:
| xor(5 == 6, !FALSE)

> xor(5==6, !FALSE)
[1] TRUE

| You are amazing!
  |=====================================================                |  76%
| 5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE)
| evaluates to TRUE. On the other hand if the first argument was changed to 5
| == 5 and the second argument was unchanged then both arguments would have
| been TRUE, so xor(TRUE, TRUE) would have evaluated to FALSE.

...
  |======================================================               |  78%
| Which of the following evaluates to FALSE?

1: xor(!isTRUE(TRUE), 6 > -1)
2: xor(identical(xor, 'xor'), 7 == 7.0)
3: xor(!!TRUE, !!FALSE)
4: xor(4 >= 9, 8 != 8.0)

Selection: 3

| Almost! Try again.

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be
| FALSE.

1: xor(4 >= 9, 8 != 8.0)
2: xor(!!TRUE, !!FALSE)
3: xor(identical(xor, 'xor'), 7 == 7.0)
4: xor(!isTRUE(TRUE), 6 > -1)

Selection: 3

| Keep trying!

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be
| FALSE.

1: xor(!isTRUE(TRUE), 6 > -1)
2: xor(!!TRUE, !!FALSE)
3: xor(identical(xor, 'xor'), 7 == 7.0)
4: xor(4 >= 9, 8 != 8.0)

Selection: 2

| Keep trying!

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be
| FALSE.

1: xor(4 >= 9, 8 != 8.0)
2: xor(identical(xor, 'xor'), 7 == 7.0)
3: xor(!isTRUE(TRUE), 6 > -1)
4: xor(!!TRUE, !!FALSE)

Selection: 3

| Almost! Try again.

| For xor() to evaluate to TRUE, one argument must be TRUE and one must be
| FALSE.

1: xor(4 >= 9, 8 != 8.0)
2: xor(identical(xor, 'xor'), 7 == 7.0)
3: xor(!isTRUE(TRUE), 6 > -1)
4: xor(!!TRUE, !!FALSE)

Selection: 1

| All that hard work is paying off!
  |=======================================================              |  80%
| For the next few questions, we're going to need to create a vector of
| integers called ints. Create this vector by typing: ints <- sample(10)

> xor(4 >= 9, 8 != 8.0)
[1] FALSE

| One more time. You can do it! Or, type info() for more options.

| To create a vector of ten integers without replacement type: ints <-
| sample(10)

> ints <- sample(10)

| All that practice is paying off!
  |=========================================================            |  82%
| Now simply display the contents of ints.

> ints
 [1]  4  1 10  7  6  3  8  5  9  2

| Keep working like that and you'll get there!
  |==========================================================           |  84%
| The vector `ints` is a random sampling of integers from 1 to 10 without
| replacement. Let's say we wanted to ask some logical questions about
| contents of ints. If we type ints > 5, we will get a logical vector
| corresponding to whether each element of ints is greater than 5. Try typing:
| ints > 5

> ints > 5
 [1] FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE

| You're the best!
  |============================================================         |  86%
| We can use the resulting logical vector to ask other questions about ints.
| The which() function takes a logical vector as an argument and returns the
| indices of the vector that are TRUE. For example which(c(TRUE, FALSE, TRUE))
| would return the vector c(1, 3).

...
  |=============================================================        |  88%
| Use the which() function to find the indices of ints that are greater than
| 7.

> which(ints > 7)
[1] 3 7 9

| You're the best!
  |==============================================================       |  90%
| Which of the following commands would produce the indices of the elements in
| ints that are less than or equal to 2?

1: ints <= 2
2: ints < 2
3: which(ints < 2)
4: which(ints <= 2)

Selection: 4

| You are quite good my friend!
  |================================================================     |  92%
| Like the which() function, the functions any() and all() take logical
| vectors as their argument. The any() function will return TRUE if one or
| more of the elements in the logical vector is TRUE. The all() function will
| return TRUE if every element in the logical vector is TRUE.

...
  |=================================================================    |  94%
| Use the any() function to see if any of the elements of ints are less than
| zero.

> any(ints < 0)
[1] FALSE

| That's correct!
  |==================================================================   |  96%
| Use the all() function to see if all of the elements of ints are greater
| than zero.

> all(ints > 0)
[1] TRUE

| Nice work!
  |==================================================================== |  98%
| Which of the following evaluates to TRUE?

1: any(ints == 10)
2: any(ints == 2.5)
3: all(c(TRUE, FALSE, TRUE))
4: all(ints == 10)

Selection: 1

| You nailed it! Good job!
  |=====================================================================| 100%
| That's all for this introduction to logic in R. If you really want to see
| what you can do with logic, check out the control flow lesson!

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Logic.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 9
  |                                                                     |   0%

| Functions are one of the fundamental building blocks of the R language. They
| are small pieces of reusable code that can be treated like any other R
| object.

...
  |=                                                                    |   2%
| If you've worked through any other part of this course, you've probably used
| some functions already. Functions are usually characterized by the name of
| the function followed by parentheses.

...
  |===                                                                  |   4%
| Let's try using a few basic functions just for fun. The Sys.Date() function
| returns a string representing today's date. Type Sys.Date() below and see
| what happens.

> Sys.Data()
Error: could not find function "Sys.Data"
> Sys.Date()
[1] "2015-04-14"

| You are amazing!
  |====                                                                 |   6%
| Most functions in R return a value. Functions like Sys.Date() return a value
| based on your computer's environment, while other functions manipulate input
| data in order to compute a return value.

...
  |======                                                               |   8%
| The mean() function takes a vector of numbers as input, and returns the
| average of all of the numbers in the input vector. Inputs to functions are
| often called arguments. Providing arguments to a function is also sometimes
| called passing arguments to that function. Arguments you want to pass to a
| function go inside the function's parentheses. Try passing the argument c(2,
| 4, 5) to the mean() function.

> mean(c(2,4,5))
[1] 3.666667

| Keep working like that and you'll get there!
  |=======                                                              |  10%
| Functions usually take arguments which are variables that the function
| operates on. For example, the mean() function takes a vector as as argument,
| like in the case of mean(c(2,6,8)). The mean() function then adds up all of
| the numbers in the vector and divides that sum by the length of the vector.

...
  |=========                                                            |  12%
| In the following question you will be asked to modify a script that will
| appear as soon as you move on from this question. When you have finished
| modifying the script, save your changes to the script and type submit() and
| the script will be evaluated. There will be some comments in the script that
| opens up, so be sure to read them!

...
  |==========                                                           |  15%
| The last R expression to be evaluated in a function will become the return
| value of that function. We want this function to take one argument, x, and
| return x without modifying it. Delete the pound sign so that x is returned
| without any modification. Make sure to save your script before you type
| submit().

2015-04-14 13:35:26.762 R[13966:707] *** WARNING: Method convertPointFromBase: in class NSView is deprecated on 10.7 and later. It should not be used in new applications. 
> submit()

| Sourcing your script...


| You are doing so well!
  |============                                                         |  17%
| Now that you've created your first function let's test it! Type:
| boring_function('My first function!'). If your function works, it should
| just return the string: 'My first function!'

> boring_function('My first function!')
[1] "My first function!"

| Your dedication is inspiring!
  |=============                                                        |  19%
| Congratulations on writing your first function. By writing functions, you
| can gain serious insight into how R works. As John Chambers, the creator of
| R once said:
| 
| To understand computations in R, two slogans are helpful: 1. Everything that
| exists is an object. 2. Everything that happens is a function call.

...
  |==============                                                       |  21%
| If you want to see the source code for any function, just type the function
| name without any arguments or parentheses. Let's try this out with the
| function you just created. Type: boring_function to view its source code.

> boring_function
function(x) {
  x
}

| All that practice is paying off!
  |================                                                     |  23%
| Time to make a more useful function! We're going to replicate the
| functionality of the mean() function by creating a function called:
| my_mean(). Remember that to calculate the average of all of the numbers in a
| vector you find the sum of all the numbers in the vector, and then divide
| that sum by the number of numbers in the vector.

...
  |=================                                                    |  25%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| Perseverance, that's the answer.
  |===================                                                  |  27%
| Now test out your my_mean() function by finding the mean of the vector c(4,
| 5, 10).

> my_mean(c(4,5,10))
[1] 6.333333

| You got it!
  |====================                                                 |  29%
| Next, let's try writing a function with default arguments. You can set
| default values for a function's argumets, and this can be useful if you
| think someone who uses your function will set a certain argument to the same
| value most of the time.

...
  |======================                                               |  31%
| Make sure to save your script before you type submit().

> sumbit()
Error: could not find function "sumbit"
> submit()

| Sourcing your script...


| You got it!
  |=======================                                              |  33%
| Let's do some testing of the remainder function. Run remainder(5) and see
| what happens.

> remainder(5)
[1] 1

| All that practice is paying off!
  |========================                                             |  35%
| Let's take a moment to examine what just happened. You provided one argument
| to the function, and R matched that argument to 'num' since 'num' is the
| first argument. The default value for 'divisor' is 2, so the function used
| the default value you provided.

...
  |==========================                                           |  38%
| Now let's test the remainder function by providing two arguments. Type:
| remainder(11, 5) and let's see what happens.

> remainder(11, 5)
[1] 1

| Perseverance, that's the answer.
  |===========================                                          |  40%
| Once again, the arguments have been matched appropriately.

...
  |=============================                                        |  42%
| You can also explicitly specify arguments in a function. When you explicitly
| designate argument values by name, the ordering of the arguments becomes
| unimportant. You can try this out by typing: remainder(divisor = 11, num =
| 5).

> remainder(divisor=11, num=5)
[1] 5

| You are doing so well!
  |==============================                                       |  44%
| As you can see, there is a significant difference between remainder(11, 5)
| and remainder(divisor = 11, num = 5)!

...
  |================================                                     |  46%
| R can also partially match arguments. Try typing remainder(4, div = 2) to
| see this feature in action.

> remainder(4, div=2)
[1] 0

| You got it right!
  |=================================                                    |  48%
| A word of warning: in general you want to make your code as easy to
| understand as possible. Switching around the orders of arguments by
| specifying their names or only using partial argument names can be
| confusing, so use these features with caution!

...
  |==================================                                   |  50%
| With all of this talk about arguments, you may be wondering if there is a
| way you can see a function's arguments (besides looking at the
| documentation). Thankfully, you can use the args() function! Type:
| args(remainder) to examine the arguments for the remainder function.

> args(remainder)
function (num, divisor = 2) 
NULL

| Your dedication is inspiring!
  |====================================                                 |  52%
| You may not realize it but I just tricked you into doing something pretty
| interesting! args() is a function, remainder() is a function, yet remainder
| was an argument for args(). Yes it's true: you can pass functions as
| arguments! This is a very powerful concept. Let's write a script to see how
| it works.

...
  |=====================================                                |  54%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You got it right!
  |=======================================                              |  56%
| Let's take your new evaluate() function for a spin! Use evaluate to find the
| standard deviation of the vector c(1.4, 3.6, 7.9, 8.8).

> evalute(c(1.4,3.6,7.9,8.8))
Error: could not find function "evalute"
> evaluate(c(1.4,3.6,7.9,8.8))
Error in evaluate(c(1.4, 3.6, 7.9, 8.8)) : could not find function "func"
> evaluate(std, c(1.4,3.6,7.9,8.8))
Error in evaluate(std, c(1.4, 3.6, 7.9, 8.8)) : object 'std' not found
> args(std)
Error in args(std) : object 'std' not found
> evaluate(sd, c(1.4,3.6,7.9,8.8))
[1] 3.514138

| All that hard work is paying off!
  |========================================                             |  58%
| The idea of passing functions as arguments to other functions is an
| important and fundamental concept in programming.

...
  |==========================================                           |  60%
| You may be surprised to learn that you can pass a function as an argument
| without first defining the passed function. Functions that are not named are
| appropriately known as anonymous functions.

...
  |===========================================                          |  62%
| Let's use the evaluate function to explore how anonymous functions work. For
| the first argument of the evaluate function we're going to write a tiny
| function that fits on one line. In the second argument we'll pass some data
| to the tiny anonymous function in the first argument.

...
  |=============================================                        |  65%
| Type the following command and then we'll discuss how it works:
| evaluate(function(x){x+1}, 6)

> evaluate(function(x){x+1}, 6)
[1] 7

| You are doing so well!
  |==============================================                       |  67%
| The first argument is a tiny anonymous function that takes one argument `x`
| and returns `x+1`. We passed the number 6 into this function so the entire
| expression evaluates to 7.

...
  |===============================================                      |  69%
| Try using evaluate() along with an anonymous function to return the first
| element of the vector c(8, 4, 0). Your anonymous function should only take
| one argument which should be a variable `x`.

> evaluate(function(x){x[1]}, c(8,4,0))
[1] 8

| You got it right!
  |=================================================                    |  71%
| Now try using evaluate() along with an anonymous function to return the last
| element of the vector c(8, 4, 0). Your anonymous function should only take
| one argument which should be a variable `x`.

> evaluate(function(x){x[-1]}, c(8,4,0))
[1] 4 0

| Give it another try. Or, type info() for more options.

| You may need to recall how to index vector elements. Remember that your
| anonymous function should only have one argument, and that argument should
| be named `x`. Using the length() function in your anonymous function may
| help you.

> evaluate(function(x){x[length(x)]}, c(8,4,0))
[1] 0

| You are amazing!
  |==================================================                   |  73%
| For the rest of the course we're going to use the paste() function
| frequently. Type ?paste so we can take a look at the documentation for the
| paste function.

> ?paste

| You are amazing!
  |====================================================                 |  75%
| As you can see the first argument of paste() is `...` which is referred to
| as an ellipsis or simply dot-dot-dot. The ellipsis allows an indefinite
| number of arguments to be passed into a function. In the case of paste() any
| number of strings can be passed as arguments and paste() will return all of
| the strings combined into one string.

...
  |=====================================================                |  77%
| Just to see how paste() works, type paste("Programming", "is", "fun!")

> paste("Programming", "is", "fun!")
[1] "Programming is fun!"

| Excellent job!
  |=======================================================              |  79%
| Time to write our own modified version of paste().

...
  |========================================================             |  81%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| Nice work!
  |=========================================================            |  83%
| Now let's test out your telegram function. Use your new telegram function
| passing in whatever arguments you wish!

> telegram("Hello")
[1] "START Hello STOP"

| You nailed it! Good job!
  |===========================================================          |  85%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| Keep trying!

| Your function should have three sections: capture the ellipsis in a list(),
| unpack the arguments from the ellipsis and assign them to variables, then
| pass those variables to paste().

> submit()

| Sourcing your script...


| Great job!
  |============================================================         |  88%
| Time to use your mad_libs function. Make sure to name the place, adjective,
| and noun arguments in order for your function to work.

> mad_libs("Berkeley", "blue", "trumpet")
[1] "News from Berkeley today where blue students took to the streets in protest of the new trumpet being installed on campus."

| You are amazing!
  |==============================================================       |  90%
| We're coming to the end of this lesson, but there's still one more idea you
| should be made aware of.

...
  |===============================================================      |  92%
| You're familiar with adding, subtracting, multiplying, and dividing numbers
| in R. To do this you use the +, -, *, and / symbols. These symbols are
| called binary operators because they take two inputs, an input from the left
| and an input from the right.

...
  |=================================================================    |  94%
| In R you can define your own binary operators. In the next script I'll show
| you how.

...
  |==================================================================   |  96%
| Make sure to save your script before you type submit().

> submit()

| Sourcing your script...


| You are really on a roll!
  |==================================================================== |  98%
| You made your own binary operator! Let's test it out. Paste together the
| strings: 'I', 'love', 'R!' using your new binary operator.

> 'I' %p% 'love' %p% 'R!'
[1] "I love R!"

| Great job!
  |=====================================================================| 100%
| We've come to the end of our lesson! Go out there and write some great
| functions!

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Functions.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

1
Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 10
  |                                                                     |   0%

| In this lesson, you'll learn how to use lapply() and sapply(), the two most
| important members of R's *apply family of functions, also known as loop
| functions.

...
  |=                                                                    |   2%
| These powerful functions, along with their close relatives (vapply() and
| tapply(), among others) offer a concise and convenient means of implementing
| the Split-Apply-Combine strategy for data analysis.

...
  |===                                                                  |   4%
| Each of the *apply functions will SPLIT up some data into smaller pieces,
| APPLY a function to each piece, then COMBINE the results. A more detailed
| discussion of this strategy is found in Hadley Wickham's Journal of
| Statistical Software paper titled 'The Split-Apply-Combine Strategy for Data
| Analysis'.

...
  |====                                                                 |   6%
| Throughout this lesson, we'll use the Flags dataset from the UCI Machine
| Learning Repository. This dataset contains details of various nations and
| their flags. More information may be found here:
| http://archive.ics.uci.edu/ml/datasets/Flags

...
  |======                                                               |   8%
| Let's jump right in so you can get a feel for how these special functions
| work!

...
  |=======                                                              |  10%
| I've stored the dataset in a variable called flags. Type head(flags) to
| preview the first six lines (i.e. the 'head') of the dataset.

> head(flags)
            name landmass zone area population language religion bars stripes
1    Afghanistan        5    1  648         16       10        2    0       3
2        Albania        3    1   29          3        6        6    0       0
3        Algeria        4    1 2388         20        8        2    2       0
4 American-Samoa        6    3    0          0        1        1    0       0
5        Andorra        3    1    0          0        6        0    3       0
6         Angola        4    2 1247          7       10        5    0       2
  colours red green blue gold white black orange mainhue circles crosses
1       5   1     1    0    1     1     1      0   green       0       0
2       3   1     0    0    1     0     1      0     red       0       0
3       3   1     1    0    0     1     0      0   green       0       0
4       5   1     0    1    1     1     0      1    blue       0       0
5       3   1     0    1    1     0     0      0    gold       0       0
6       3   1     0    0    1     0     1      0     red       0       0
  saltires quarters sunstars crescent triangle icon animate text topleft
1        0        0        1        0        0    1       0    0   black
2        0        0        1        0        0    0       1    0     red
3        0        0        1        1        0    0       0    0   green
4        0        0        0        0        1    1       1    0    blue
5        0        0        0        0        0    0       0    0    blue
6        0        0        1        0        0    1       0    0     red
  botright
1    green
2      red
3    white
4      red
5      red
6    black

| You are quite good my friend!
  |========                                                             |  12%
| You may need to scroll up to see all of the output. Now, let's check out the
| dimensions of the dataset using dim(flags).

> dim(flags)
[1] 194  30

| You are doing so well!
  |==========                                                           |  14%
| This tells us that there are 194 rows, or observations, and 30 columns, or
| variables. Each observation is a country and each variable describes some
| characteristic of that country or its flag. To open a more complete
| description of the dataset in a separate text file, type viewinfo() when you
| are back at the prompt (>).

...
  |===========                                                          |  16%
| As with any dataset, we'd like to know in what format the variables have
| been stored. In other words, what is the 'class' of each variable? What
| happens if we do class(flags)? Try it out.

> class(flags)
[1] "data.frame"

| You are amazing!
  |=============                                                        |  18%
| That just tells us that the entire dataset is stored as a 'data.frame',
| which doesn't answer our question. What we really need is to call the
| class() function on each individual column. While we could do this manually
| (i.e. one column at a time) it's much faster if we can automate the process.
| Sounds like a loop!

...
  |==============                                                       |  20%
| The lapply() function takes a list as input, applies a function to each
| element of the list, then returns a list of the same length as the original
| one. Since a data frame is really just a list of vectors (you can see this
| with as.list(flags)), we can use lapply() to apply the class() function to
| each column of the flags dataset. Let's see it in action!

...
  |===============                                                      |  22%
| Type cls_list <- lapply(flags, class) to apply the class() function to each
| column of the flags dataset and store the result in a variable called
| cls_list. Note that you just supply the name of the function you want to
| apply (i.e. class), without the usual parentheses after it.

> cls_list <- lapply(flags, class)

| Nice work!
  |=================                                                    |  24%
| Type cls_list to view the result.

> cls_list
$name
[1] "factor"

$landmass
[1] "integer"

$zone
[1] "integer"

$area
[1] "integer"

$population
[1] "integer"

$language
[1] "integer"

$religion
[1] "integer"

$bars
[1] "integer"

$stripes
[1] "integer"

$colours
[1] "integer"

$red
[1] "integer"

$green
[1] "integer"

$blue
[1] "integer"

$gold
[1] "integer"

$white
[1] "integer"

$black
[1] "integer"

$orange
[1] "integer"

$mainhue
[1] "factor"

$circles
[1] "integer"

$crosses
[1] "integer"

$saltires
[1] "integer"

$quarters
[1] "integer"

$sunstars
[1] "integer"

$crescent
[1] "integer"

$triangle
[1] "integer"

$icon
[1] "integer"

$animate
[1] "integer"

$text
[1] "integer"

$topleft
[1] "factor"

$botright
[1] "factor"


| You nailed it! Good job!
  |==================                                                   |  27%
| The 'l' in 'lapply' stands for 'list'. Type class(cls_list) to confirm that
| lapply() returned a list.

> class(cls_list)
[1] "list"

| You nailed it! Good job!
  |====================                                                 |  29%
| As expected, we got a list of length 30 -- one element for each
| variable/column. The output would be considerably more compact if we could
| represent it as a vector instead of a list.

...
  |=====================                                                |  31%
| You may remember from a previous lesson that lists are most helpful for
| storing multiple classes of data. In this case, since every element of the
| list returned by lapply() is a character vector of length one (i.e.
| "integer" and "vector"), cls_list can be simplified to a character vector.
| To do this manually, type as.character(cls_list).

> as.character(cls_list)
 [1] "factor"  "integer" "integer" "integer" "integer" "integer" "integer"
 [8] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[15] "integer" "integer" "integer" "factor"  "integer" "integer" "integer"
[22] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[29] "factor"  "factor" 

| You are doing so well!
  |=======================                                              |  33%
| sapply() allows you to automate this process by calling lapply() behind the
| scenes, but then attempting to simplify (hence the 's' in 'sapply') the
| result for you. Use sapply() the same way you used lapply() to get the class
| of each column of the flags dataset and store the result in cls_vect. If you
| need help, type ?sapply to bring up the documentation.

> cls_vect <- sapply(flags, class)

| You are really on a roll!
  |========================                                             |  35%
| Use class(cls_vect) to confirm that sapply() simplified the result to a
| character vector.

> class(cls_vect)
[1] "character"

| You are quite good my friend!
  |=========================                                            |  37%
| In general, if the result is a list where every element is of length one,
| then sapply() returns a vector. If the result is a list where every element
| is a vector of the same length (> 1), sapply() returns a matrix. If sapply()
| can't figure things out, then it just returns a list, no different from what
| lapply() would give you.

...
  |===========================                                          |  39%
| Let's practice using lapply() and sapply() some more!

...
  |============================                                         |  41%
| Columns 11 through 17 of our dataset are indicator variables, each
| representing a different color. The value of the indicator variable is 1 if
| the color is present in a country's flag and 0 otherwise.

...
  |==============================                                       |  43%
| Therefore, if we want to know the total number of countries (in our dataset)
| with, for example, the color orange on their flag, we can just add up all of
| the 1s and 0s in the 'orange' column. Try sum(flags$orange) to see this.

> sum(flags$orange)
[1] 26

| Your dedication is inspiring!
  |===============================                                      |  45%
| Now we want to repeat this operation for each of the colors recorded in the
| dataset.

...
  |================================                                     |  47%
| First, use flag_colors <- flags[, 11:17] to extract the columns containing
| the color data and store them in a new data frame called flag_colors. (Note
| the comma before 11:17. This subsetting command tells R that we want all
| rows, but only columns 11 through 17.)

> flag_colors <- flagS(, 11:17)
Error: could not find function "flagS"
> flag_colors <- flags(, 11:17)
Error: could not find function "flags"
> flag_colors <- flags[], 11:17]
Error: unexpected ',' in "flag_colors <- flags[],"
> flag_colors <- flags[, 11:17]

| Excellent job!
  |==================================                                   |  49%
| Use the head() function to look at the first 6 lines of flag_colors.

> head(flag_colors)
  red green blue gold white black orange
1   1     1    0    1     1     1      0
2   1     0    0    1     0     1      0
3   1     1    0    0     1     0      0
4   1     0    1    1     1     0      1
5   1     0    1    1     0     0      0
6   1     0    0    1     0     1      0

| Keep working like that and you'll get there!
  |===================================                                  |  51%
| To get a list containing the sum of each column of flag_colors, call the
| lapply() function with two arguments. The first argument is the object over
| which we are looping (i.e. flag_colors) and the second argument is the name
| of the function we wish to apply to each column (i.e. sum). Remember that
| the second argument is just the name of the function with no parentheses,
| etc.

> lapply(flag_colors, sum)
$red
[1] 153

$green
[1] 91

$blue
[1] 99

$gold
[1] 91

$white
[1] 146

$black
[1] 52

$orange
[1] 26


| That's the answer I was looking for.
  |=====================================                                |  53%
| This tells us that of the 194 flags in our dataset, 153 contain the color
| red, 91 contain green, 99 contain blue, and so on.

...
  |======================================                               |  55%
| The result is a list, since lapply() always returns a list. Each element of
| this list is of length one, so the result can be simplified to a vector by
| calling sapply() instead of lapply(). Try it now.

> sapply(flag_colors, sum)
   red  green   blue   gold  white  black orange 
   153     91     99     91    146     52     26 

| You got it right!
  |=======================================                              |  57%
| Perhaps it's more informative to find the proportion of flags (out of 194)
| containing each color. Since each column is just a bunch of 1s and 0s, the
| arithmetic mean of each column will give us the proportion of 1s. (If it's
| not clear why, think of a simpler situation where you have three 1s and two
| 0s -- (1 + 1 + 1 + 0 + 0)/5 = 3/5 = 0.6).

...
  |=========================================                            |  59%
| Use sapply() to apply the mean() function to each column of flag_colors.
| Remember that the second argument to sapply() should just specify the name
| of the function (i.e. mean) that you want to apply.

> sapply(flag_colors, mean)
      red     green      blue      gold     white     black    orange 
0.7886598 0.4690722 0.5103093 0.4690722 0.7525773 0.2680412 0.1340206 

| You nailed it! Good job!
  |==========================================                           |  61%
| In the examples we've looked at so far, sapply() has been able to simplify
| the result to vector. That's because each element of the list returned by
| lapply() was a vector of length one. Recall that sapply() instead returns a
| matrix when each element of the list returned by lapply() is a vector of the
| same length (> 1).

...
  |============================================                         |  63%
| To illustrate this, let's extract columns 19 through 23 from the flags
| dataset and store the result in a new data frame called flag_shapes.
| flag_shapes <- flags[, 19:23] will do it.

> flag_shapes <- flags[, 19:23]

| Keep up the great work!
  |=============================================                        |  65%
| Each of these columns (i.e. variables) represents the number of times a
| particular shape or design appears on a country's flag. We are interested in
| the minimum and maximum number of times each shape or design appears.

...
  |==============================================                       |  67%
| The range() function returns the minimum and maximum of its first argument,
| which should be a numeric vector. Use lapply() to apply the range function
| to each column of flag_shapes. Don't worry about storing the result in a new
| variable. By now, we know that lapply() always returns a list.

> lapply(flag_shapes, range)
$circles
[1] 0 4

$crosses
[1] 0 2

$saltires
[1] 0 1

$quarters
[1] 0 4

$sunstars
[1]  0 50


| That's correct!
  |================================================                     |  69%
| Do the same operation, but using sapply() and store the result in a variable
| called shape_mat.

> shape_mat <- sapply(flag_shapes, range)

| You got it right!
  |=================================================                    |  71%
| View the contents of shape_mat.

> shape_mat
     circles crosses saltires quarters sunstars
[1,]       0       0        0        0        0
[2,]       4       2        1        4       50

| All that practice is paying off!
  |===================================================                  |  73%
| Each column of shape_mat gives the minimum (row 1) and maximum (row 2)
| number of times its respective shape appears in different flags.

...
  |====================================================                 |  76%
| Use the class() function to confirm that shape_mat is a matrix.

> class(shape_mat)
[1] "matrix"

| You nailed it! Good job!
  |======================================================               |  78%
| As we've seen, sapply() always attempts to simplify the result given by
| lapply(). It has been successful in doing so for each of the examples we've
| looked at so far. Let's look at an example where sapply() can't figure out
| how to simplify the result and thus returns a list, no different from
| lapply().

...
  |=======================================================              |  80%
| When given a vector, the unique() function returns a vector with all
| duplicate elements removed. In other words, unique() returns a vector of
| only the 'unique' elements. To see how it works, try unique(c(3, 4, 5, 5, 5,
| 6, 6)).

> unique(c(3,4,5,5,5,6,6))
[1] 3 4 5 6

| You got it right!
  |========================================================             |  82%
| We want to know the unique values for each variable in the flags dataset. To
| accomplish this, use lapply() to apply the unique() function to each column
| in the flags dataset, storing the result in a variable called unique_vals.

> unique_vals <- lapply(flags, unique)

| You got it!
  |==========================================================           |  84%
| Print the value of unique_vals to the console.

> unique_vals
$name
  [1] Afghanistan              Albania                 
  [3] Algeria                  American-Samoa          
  [5] Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda         
  [9] Argentina                Argentine               
 [11] Australia                Austria                 
 [13] Bahamas                  Bahrain                 
 [15] Bangladesh               Barbados                
 [17] Belgium                  Belize                  
 [19] Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                 
 [23] Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                  
 [27] Bulgaria                 Burkina                 
 [29] Burma                    Burundi                 
 [31] Cameroon                 Canada                  
 [33] Cape-Verde-Islands       Cayman-Islands          
 [35] Central-African-Republic Chad                    
 [37] Chile                    China                   
 [39] Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                    
 [45] Cyprus                   Czechoslovakia          
 [47] Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                   
 [53] El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                 
 [57] Falklands-Malvinas       Fiji                    
 [59] Finland                  France                  
 [61] French-Guiana            French-Polynesia        
 [63] Gabon                    Gambia                  
 [65] Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar               
 [69] Greece                   Greenland               
 [71] Grenada                  Guam                    
 [73] Guatemala                Guinea                  
 [75] Guinea-Bissau            Guyana                  
 [77] Haiti                    Honduras                
 [79] Hong-Kong                Hungary                 
 [81] Iceland                  India                   
 [83] Indonesia                Iran                    
 [85] Iraq                     Ireland                 
 [87] Israel                   Italy                   
 [89] Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                  
 [93] Kampuchea                Kenya                   
 [95] Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                 
 [99] Lesotho                  Liberia                 
[101] Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                
[105] Malawi                   Malaysia                
[107] Maldive-Islands          Mali                    
[109] Malta                    Marianas                
[111] Mauritania               Mauritius               
[113] Mexico                   Micronesia              
[115] Monaco                   Mongolia                
[117] Montserrat               Morocco                 
[119] Mozambique               Nauru                   
[121] Nepal                    Netherlands             
[123] Netherlands-Antilles     New-Zealand             
[125] Nicaragua                Niger                   
[127] Nigeria                  Niue                    
[129] North-Korea              North-Yemen             
[131] Norway                   Oman                    
[133] Pakistan                 Panama                  
[135] Papua-New-Guinea         Parguay                 
[137] Peru                     Philippines             
[139] Poland                   Portugal                
[141] Puerto-Rico              Qatar                   
[143] Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                
[147] Saudi-Arabia             Senegal                 
[149] Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands         
[153] Somalia                  South-Africa            
[155] South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka               
[159] St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                 
[165] Swaziland                Sweden                  
[167] Switzerland              Syria                   
[169] Taiwan                   Tanzania                
[171] Thailand                 Togo                    
[173] Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                  
[177] Turks-Cocos-Islands      Tuvalu                  
[179] UAE                      Uganda                  
[181] UK                       Uruguay                 
[183] US-Virgin-Isles          USA                     
[185] USSR                     Vanuatu                 
[187] Vatican-City             Venezuela               
[189] Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35
[16]    4   24    2   11 1008    5   47   31   54   17   61   14  684  157   39
[31]   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45
[46]  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| All that hard work is paying off!
  |===========================================================          |  86%
| Since unique_vals is a list, you can use what you've learned to determine
| the length of each element of unique_vals (i.e. the number of unique values
| for each variable). Simplify the result, if possible. Hint: Apply the
| length() function to each element of unique_vals.

> sapply(unique_vals, length)
      name   landmass       zone       area population   language   religion 
       194          6          4        136         48         10          8 
      bars    stripes    colours        red      green       blue       gold 
         5         12          8          2          2          2          2 
     white      black     orange    mainhue    circles    crosses   saltires 
         2          2          2          8          4          3          2 
  quarters   sunstars   crescent   triangle       icon    animate       text 
         3         14          2          2          2          2          2 
   topleft   botright 
         7          8 

| You are quite good my friend!
  |=============================================================        |  88%
| The fact that the elements of the unique_vals list are all vectors of
| *different* length poses a problem for sapply(), since there's no obvious
| way of simplifying the result.

...
  |==============================================================       |  90%
| Use sapply() to apply the unique() function to each column of the flags
| dataset to see that you get the same unsimplified list that you got from
| lapply().

> sapply(flags, unique)
$name
  [1] Afghanistan              Albania                 
  [3] Algeria                  American-Samoa          
  [5] Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda         
  [9] Argentina                Argentine               
 [11] Australia                Austria                 
 [13] Bahamas                  Bahrain                 
 [15] Bangladesh               Barbados                
 [17] Belgium                  Belize                  
 [19] Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                 
 [23] Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                  
 [27] Bulgaria                 Burkina                 
 [29] Burma                    Burundi                 
 [31] Cameroon                 Canada                  
 [33] Cape-Verde-Islands       Cayman-Islands          
 [35] Central-African-Republic Chad                    
 [37] Chile                    China                   
 [39] Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                    
 [45] Cyprus                   Czechoslovakia          
 [47] Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                   
 [53] El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                 
 [57] Falklands-Malvinas       Fiji                    
 [59] Finland                  France                  
 [61] French-Guiana            French-Polynesia        
 [63] Gabon                    Gambia                  
 [65] Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar               
 [69] Greece                   Greenland               
 [71] Grenada                  Guam                    
 [73] Guatemala                Guinea                  
 [75] Guinea-Bissau            Guyana                  
 [77] Haiti                    Honduras                
 [79] Hong-Kong                Hungary                 
 [81] Iceland                  India                   
 [83] Indonesia                Iran                    
 [85] Iraq                     Ireland                 
 [87] Israel                   Italy                   
 [89] Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                  
 [93] Kampuchea                Kenya                   
 [95] Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                 
 [99] Lesotho                  Liberia                 
[101] Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                
[105] Malawi                   Malaysia                
[107] Maldive-Islands          Mali                    
[109] Malta                    Marianas                
[111] Mauritania               Mauritius               
[113] Mexico                   Micronesia              
[115] Monaco                   Mongolia                
[117] Montserrat               Morocco                 
[119] Mozambique               Nauru                   
[121] Nepal                    Netherlands             
[123] Netherlands-Antilles     New-Zealand             
[125] Nicaragua                Niger                   
[127] Nigeria                  Niue                    
[129] North-Korea              North-Yemen             
[131] Norway                   Oman                    
[133] Pakistan                 Panama                  
[135] Papua-New-Guinea         Parguay                 
[137] Peru                     Philippines             
[139] Poland                   Portugal                
[141] Puerto-Rico              Qatar                   
[143] Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                
[147] Saudi-Arabia             Senegal                 
[149] Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands         
[153] Somalia                  South-Africa            
[155] South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka               
[159] St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                 
[165] Swaziland                Sweden                  
[167] Switzerland              Syria                   
[169] Taiwan                   Tanzania                
[171] Thailand                 Togo                    
[173] Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                  
[177] Turks-Cocos-Islands      Tuvalu                  
[179] UAE                      Uganda                  
[181] UK                       Uruguay                 
[183] US-Virgin-Isles          USA                     
[185] USSR                     Vanuatu                 
[187] Vatican-City             Venezuela               
[189] Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35
[16]    4   24    2   11 1008    5   47   31   54   17   61   14  684  157   39
[31]   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45
[46]  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| Great job!
  |===============================================================      |  92%
| Occasionally, you may need to apply a function that is not yet defined, thus
| requiring you to write your own. Writing functions in R is beyond the scope
| of this lesson, but let's look at a quick example of how you might do so in
| the context of loop functions.

...
  |=================================================================    |  94%
| Pretend you are interested in only the second item from each element of the
| unique_vals list that you just created. Since each element of the
| unique_vals list is a vector and we're not aware of any built-in function in
| R that returns the second element of a vector, we will construct our own
| function.

...
  |==================================================================   |  96%
| lapply(unique_vals, function(elem) elem[2]) will return a list containing
| the second item from each element of the unique_vals list. Note that our
| function takes one argument, elem, which is just a 'dummy variable' that
| takes on the value of each element of unique_vals, in turn.

> lapply(unique_vals, function(elem) elem[2])
$name
[1] Albania
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 3

$zone
[1] 3

$area
[1] 29

$population
[1] 3

$language
[1] 6

$religion
[1] 6

$bars
[1] 2

$stripes
[1] 0

$colours
[1] 3

$red
[1] 0

$green
[1] 0

$blue
[1] 1

$gold
[1] 0

$white
[1] 0

$black
[1] 0

$orange
[1] 1

$mainhue
[1] red
Levels: black blue brown gold green orange red white

$circles
[1] 1

$crosses
[1] 1

$saltires
[1] 1

$quarters
[1] 1

$sunstars
[1] 0

$crescent
[1] 1

$triangle
[1] 1

$icon
[1] 0

$animate
[1] 1

$text
[1] 1

$topleft
[1] red
Levels: black blue gold green orange red white

$botright
[1] red
Levels: black blue brown gold green orange red white


| Perseverance, that's the answer.
  |==================================================================== |  98%
| The only difference between previous examples and this one is that we are
| defining and using our own function right in the call to lapply(). Our
| function has no name and disappears as soon as lapply() is done using it.
| So-called 'anonymous functions' can be very useful when one of R's built-in
| functions isn't an option.

...
  |=====================================================================| 100%
| In this lesson, you learned how to use the powerful lapply() and sapply()
| functions to apply an operation over the elements of a list. In the next
| lesson, we'll take a look at some close relatives of lapply() and sapply().

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, lapply_and_sapply.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 11
  |                                                                     |   0%

| In the last lesson, you learned about the two most fundamental members of
| R's *apply family of functions: lapply() and sapply(). Both take a list as
| input, apply a function to each element of the list, then combine and return
| the result. lapply() always returns a list, whereas sapply() attempts to
| simplify the result.

...
  |===                                                                  |   4%
| In this lesson, you'll learn how to use vapply() and tapply(), each of which
| serves a very specific purpose within the Split-Apply-Combine methodology.
| For consistency, we'll use the same dataset we used in the 'lapply and
| sapply' lesson.

...
  |======                                                               |   8%
| The Flags dataset from the UCI Machine Learning Repository contains details
| of various nations and their flags. More information may be found here:
| http://archive.ics.uci.edu/ml/datasets/Flags

...
  |=========                                                            |  12%
| I've stored the data in a variable called flags. If it's been a while since
| you completed the 'lapply and sapply' lesson, you may want to reacquaint
| yourself with the data by using functions like dim(), head(), str(), and
| summary() when you return to the prompt (>). You can also type viewinfo() at
| the prompt to bring up some documentation for the dataset. Let's get
| started!

...
  |============                                                         |  17%
| As you saw in the last lesson, the unique() function returns a vector of the
| unique values contained in the object passed to it. Therefore, sapply(flags,
| unique) returns a list containing one vector of unique values for each
| column of the flags dataset. Try it again now.

> sapply(flags, unique)
$name
  [1] Afghanistan              Albania                 
  [3] Algeria                  American-Samoa          
  [5] Andorra                  Angola                  
  [7] Anguilla                 Antigua-Barbuda         
  [9] Argentina                Argentine               
 [11] Australia                Austria                 
 [13] Bahamas                  Bahrain                 
 [15] Bangladesh               Barbados                
 [17] Belgium                  Belize                  
 [19] Benin                    Bermuda                 
 [21] Bhutan                   Bolivia                 
 [23] Botswana                 Brazil                  
 [25] British-Virgin-Isles     Brunei                  
 [27] Bulgaria                 Burkina                 
 [29] Burma                    Burundi                 
 [31] Cameroon                 Canada                  
 [33] Cape-Verde-Islands       Cayman-Islands          
 [35] Central-African-Republic Chad                    
 [37] Chile                    China                   
 [39] Colombia                 Comorro-Islands         
 [41] Congo                    Cook-Islands            
 [43] Costa-Rica               Cuba                    
 [45] Cyprus                   Czechoslovakia          
 [47] Denmark                  Djibouti                
 [49] Dominica                 Dominican-Republic      
 [51] Ecuador                  Egypt                   
 [53] El-Salvador              Equatorial-Guinea       
 [55] Ethiopia                 Faeroes                 
 [57] Falklands-Malvinas       Fiji                    
 [59] Finland                  France                  
 [61] French-Guiana            French-Polynesia        
 [63] Gabon                    Gambia                  
 [65] Germany-DDR              Germany-FRG             
 [67] Ghana                    Gibraltar               
 [69] Greece                   Greenland               
 [71] Grenada                  Guam                    
 [73] Guatemala                Guinea                  
 [75] Guinea-Bissau            Guyana                  
 [77] Haiti                    Honduras                
 [79] Hong-Kong                Hungary                 
 [81] Iceland                  India                   
 [83] Indonesia                Iran                    
 [85] Iraq                     Ireland                 
 [87] Israel                   Italy                   
 [89] Ivory-Coast              Jamaica                 
 [91] Japan                    Jordan                  
 [93] Kampuchea                Kenya                   
 [95] Kiribati                 Kuwait                  
 [97] Laos                     Lebanon                 
 [99] Lesotho                  Liberia                 
[101] Libya                    Liechtenstein           
[103] Luxembourg               Malagasy                
[105] Malawi                   Malaysia                
[107] Maldive-Islands          Mali                    
[109] Malta                    Marianas                
[111] Mauritania               Mauritius               
[113] Mexico                   Micronesia              
[115] Monaco                   Mongolia                
[117] Montserrat               Morocco                 
[119] Mozambique               Nauru                   
[121] Nepal                    Netherlands             
[123] Netherlands-Antilles     New-Zealand             
[125] Nicaragua                Niger                   
[127] Nigeria                  Niue                    
[129] North-Korea              North-Yemen             
[131] Norway                   Oman                    
[133] Pakistan                 Panama                  
[135] Papua-New-Guinea         Parguay                 
[137] Peru                     Philippines             
[139] Poland                   Portugal                
[141] Puerto-Rico              Qatar                   
[143] Romania                  Rwanda                  
[145] San-Marino               Sao-Tome                
[147] Saudi-Arabia             Senegal                 
[149] Seychelles               Sierra-Leone            
[151] Singapore                Soloman-Islands         
[153] Somalia                  South-Africa            
[155] South-Korea              South-Yemen             
[157] Spain                    Sri-Lanka               
[159] St-Helena                St-Kitts-Nevis          
[161] St-Lucia                 St-Vincent              
[163] Sudan                    Surinam                 
[165] Swaziland                Sweden                  
[167] Switzerland              Syria                   
[169] Taiwan                   Tanzania                
[171] Thailand                 Togo                    
[173] Tonga                    Trinidad-Tobago         
[175] Tunisia                  Turkey                  
[177] Turks-Cocos-Islands      Tuvalu                  
[179] UAE                      Uganda                  
[181] UK                       Uruguay                 
[183] US-Virgin-Isles          USA                     
[185] USSR                     Vanuatu                 
[187] Vatican-City             Venezuela               
[189] Vietnam                  Western-Samoa           
[191] Yugoslavia               Zaire                   
[193] Zambia                   Zimbabwe                
194 Levels: Afghanistan Albania Algeria American-Samoa Andorra ... Zimbabwe

$landmass
[1] 5 3 4 6 1 2

$zone
[1] 1 3 2 4

$area
  [1]   648    29  2388     0  1247  2777  7690    84    19     1   143    31
 [13]    23   113    47  1099   600  8512     6   111   274   678    28   474
 [25]  9976     4   623  1284   757  9561  1139     2   342    51   115     9
 [37]   128    43    22    49   284  1001    21  1222    12    18   337   547
 [49]    91   268    10   108   249   239   132  2176   109   246    36   215
 [61]   112    93   103  3268  1904  1648   435    70   301   323    11   372
 [73]    98   181   583   236    30  1760     3   587   118   333  1240  1031
 [85]  1973  1566   447   783   140    41  1267   925   121   195   324   212
 [97]   804    76   463   407  1285   300   313    92   237    26  2150   196
[109]    72   637  1221    99   288   505    66  2506    63    17   450   185
[121]   945   514    57     5   164   781   245   178  9363 22402    15   912
[133]   256   905   753   391

$population
 [1]   16    3   20    0    7   28   15    8   90   10    1    6  119    9   35
[16]    4   24    2   11 1008    5   47   31   54   17   61   14  684  157   39
[31]   57  118   13   77   12   56   18   84   48   36   22   29   38   49   45
[46]  231  274   60

$language
 [1] 10  6  8  1  2  4  3  5  7  9

$religion
[1] 2 6 1 0 5 3 4 7

$bars
[1] 0 2 3 1 5

$stripes
 [1]  3  0  2  1  5  9 11 14  4  6 13  7

$colours
[1] 5 3 2 8 6 4 7 1

$red
[1] 1 0

$green
[1] 1 0

$blue
[1] 0 1

$gold
[1] 1 0

$white
[1] 1 0

$black
[1] 1 0

$orange
[1] 0 1

$mainhue
[1] green  red    blue   gold   white  orange black  brown 
Levels: black blue brown gold green orange red white

$circles
[1] 0 1 4 2

$crosses
[1] 0 1 2

$saltires
[1] 0 1

$quarters
[1] 0 1 4

$sunstars
 [1]  1  0  6 22 14  3  4  5 15 10  7  2  9 50

$crescent
[1] 0 1

$triangle
[1] 0 1

$icon
[1] 1 0

$animate
[1] 0 1

$text
[1] 0 1

$topleft
[1] black  red    green  blue   white  orange gold  
Levels: black blue gold green orange red white

$botright
[1] green  red    white  black  blue   gold   orange brown 
Levels: black blue brown gold green orange red white


| You are quite good my friend!
  |==============                                                       |  21%
| What if you had forgotten how unique() works and mistakenly thought it
| returns the *number* of unique values contained in the object passed to it?
| Then you might have incorrectly expected sapply(flags, unique) to return a
| numeric vector, since each element of the list returned would contain a
| single number and sapply() could then simplify the result to a vector.

...
  |=================                                                    |  25%
| When working interactively (at the prompt), this is not much of a problem,
| since you see the result immediately and will quickly recognize your
| mistake. However, when working non-interactively (e.g. writing your own
| functions), a misunderstanding may go undetected and cause incorrect results
| later on. Therefore, you may wish to be more careful and that's where
| vapply() is useful.

...
  |====================                                                 |  29%
| Whereas sapply() tries to 'guess' the correct format of the result, vapply()
| allows you to specify it explicitly. If the result doesn't match the format
| you specify, vapply() will throw an error, causing the operation to stop.
| This can prevent significant problems in your code that might be caused by
| getting unexpected return values from sapply().

...
  |=======================                                              |  33%
| Try vapply(flags, unique, numeric(1)), which says that you expect each
| element of the result to be a numeric vector of length 1. Since this is NOT
| actually the case, YOU WILL GET AN ERROR. Once you get the error, type ok()
| to continue to the next question.

> vapply(flags, unique, numeric(1))
Error in vapply(flags, unique, numeric(1)) : values must be length 1,
 but FUN(X[[1]]) result is length 194
> ok()

| All that hard work is paying off!
  |==========================                                           |  38%
| Recall from the previous lesson that sapply(flags, class) will return a
| character vector containing the class of each column in the dataset. Try
| that again now to see the result.

> sapply(flags, class)
      name   landmass       zone       area population   language   religion 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      bars    stripes    colours        red      green       blue       gold 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
     white      black     orange    mainhue    circles    crosses   saltires 
 "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer" 
  quarters   sunstars   crescent   triangle       icon    animate       text 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   topleft   botright 
  "factor"   "factor" 

| That's correct!
  |=============================                                        |  42%
| If we wish to be explicit about the format of the result we expect, we can
| use vapply(flags, class, character(1)). The 'character(1)' argument tells R
| that we expect the class function to return a character vector of length 1
| when applied to EACH column of the flags dataset. Try it now.

> vapply(flags, class, character(1))
      name   landmass       zone       area population   language   religion 
  "factor"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
      bars    stripes    colours        red      green       blue       gold 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
     white      black     orange    mainhue    circles    crosses   saltires 
 "integer"  "integer"  "integer"   "factor"  "integer"  "integer"  "integer" 
  quarters   sunstars   crescent   triangle       icon    animate       text 
 "integer"  "integer"  "integer"  "integer"  "integer"  "integer"  "integer" 
   topleft   botright 
  "factor"   "factor" 

| Excellent job!
  |================================                                     |  46%
| Note that since our expectation was correct (i.e. character(1)), the
| vapply() result is identical to the sapply() result -- a character vector of
| column classes.

...
  |==================================                                   |  50%
| You might think of vapply() as being 'safer' than sapply(), since it
| requires you to specify the format of the output in advance, instead of just
| allowing R to 'guess' what you wanted. In addition, vapply() may perform
| faster than sapply() for large datasets. However, when doing data analysis
| interactively (at the prompt), sapply() saves you some typing and will often
| be good enough.

...
  |=====================================                                |  54%
| As a data analyst, you'll often wish to split your data up into groups based
| on the value of some variable, then apply a function to the members of each
| group. The next function we'll look at, tapply(), does exactly that.

...
  |========================================                             |  58%
| Use ?tapply to pull up the documentation.

> ?tapply

| All that practice is paying off!
  |===========================================                          |  62%
| The 'landmass' variable in our dataset takes on integer values between 1 and
| 6, each of which represents a different part of the world. Use
| table(flags$landmass) to see how many flags/countries fall into each group.

> table(flags$landmass)

 1  2  3  4  5  6 
31 17 35 52 39 20 

| Perseverance, that's the answer.
  |==============================================                       |  67%
| The 'animate' variable in our dataset takes the value 1 if a country's flag
| contains an animate image (e.g. an eagle, a tree, a human hand) and 0
| otherwise. Use table(flags$animate) to see how many flags contain an animate
| image.

> table(flags$animate)

  0   1 
155  39 

| That's the answer I was looking for.
  |=================================================                    |  71%
| This tells us that 39 flags contain an animate object (animate = 1) and 155
| do not (animate = 0).

...
  |====================================================                 |  75%
| If you take the arithmetic mean of a bunch of 0s and 1s, you get the
| proportion of 1s. Use tapply(flags$animate, flags$landmass, mean) to apply
| the mean function to the 'animate' variable separately for each of the six
| landmass groups, thus giving us the proportion of flags containing an
| animate image WITHIN each landmass group.

> tapply(flags$animate, flags$landmass, mean)
        1         2         3         4         5         6 
0.4193548 0.1764706 0.1142857 0.1346154 0.1538462 0.3000000 

| All that hard work is paying off!
  |=======================================================              |  79%
| The first landmass group (landmass = 1) corresponds to North America and
| contains the highest proportion of flags with an animate image (0.4194).

...
  |=========================================================            |  83%
| Similarly, we can look at a summary of population values (in round millions)
| for countries with and without the color red on their flag with
| tapply(flags$population, flags$red, summary).

> tapply(flags$population, flags$red, summary)
$`0`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    3.00   27.63    9.00  684.00 

$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    0.0     0.0     4.0    22.1    15.0  1008.0 


| You nailed it! Good job!
  |============================================================         |  88%
| What is the median population (in millions) for countries *without* the
| color red on their flag?

1: 9.0
2: 0.0
3: 22.1
4: 27.6
5: 3.0
6: 4.0

Selection: 6

| Not quite! Try again.

| Use your result from the last question. Recall that red = 0 means that the
| color red is NOT present on a countries flag.

1: 9.0
2: 4.0
3: 27.6
4: 0.0
5: 3.0
6: 22.1

Selection: 5

| Keep working like that and you'll get there!
  |===============================================================      |  92%
| Lastly, use the same approach to look at a summary of population values for
| each of the six landmasses.

> tapply(flags$population, flags$landmass, summary)
$`1`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   12.29    4.50  231.00 

$`2`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    1.00    6.00   15.71   15.00  119.00 

$`3`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    8.00   13.86   16.00   61.00 

$`4`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.000   5.000   8.788   9.750  56.000 

$`5`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    2.00   10.00   69.18   39.00 1008.00 

$`6`
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00    0.00    0.00   11.30    1.25  157.00 


| Perseverance, that's the answer.
  |==================================================================   |  96%
| What is the maximum population (in millions) for the fourth landmass group
| (Africa)?

1: 5.00
2: 56.00
3: 1010.0
4: 157.00
5: 119.0

Selection: 2

| All that hard work is paying off!
  |=====================================================================| 100%
| In this lesson, you learned how to use vapply() as a safer alternative to
| sapply(), which is most helpful when writing your own functions. You also
| learned how to use tapply() to split your data into groups based on the
| value of some variable, then apply a function to each group. These functions
| will come in handy on your quest to become a better data analyst.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, vapply_and_tapply.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 12
  |                                                                     |   0%

| Whenever you're working with a new dataset, the first thing you should do is
| look at it! What is the format of the data? What are the dimensions? What
| are the variable names? How are the variables stored? Are there missing
| data? Are there any flaws in the data?

...
  |===                                                                  |   4%
| This lesson will teach you how to answer these questions and more using R's
| built-in functions. We'll be using a dataset constructed from the United
| States Department of Agriculture's PLANTS Database
| (http://plants.usda.gov/adv_search.html).

...
  |======                                                               |   8%
| I've stored the data for you in a variable called plants. Type ls() to list
| the variables in your workspace, among which should be plants.

> ls()
 [1] "%p%"             "above"           "above10"         "add2"           
 [5] "bad"             "boring_function" "cls_list"        "cls_vect"       
 [9] "cnames"          "columnmean"      "data"            "evaluate"       
[13] "flag_colors"     "flag_shapes"     "flags"           "ints"           
[17] "letter"          "mad_libs"        "may_ozone"       "my_char"        
[21] "my_data"         "my_div"          "my_matrix"       "my_matrix2"     
[25] "my_mean"         "my_na"           "my_name"         "my_seq"         
[29] "my_sqrt"         "my_vector"       "newdata"         "newnewdata"     
[33] "newnewnewdata"   "num_vect"        "ok"              "old.dir"        
[37] "ozone"           "patients"        "plants"          "remainder"      
[41] "s"               "shape_mat"       "solar"           "solar_r"        
[45] "telegram"        "temp"            "tf"              "unique_vals"    
[49] "vect"            "vect2"           "viewinfo"        "x"              
[53] "y"               "z"              

| Excellent job!
  |=========                                                            |  12%
| Let's begin by checking the class of the plants variable with class(plants).
| This will give us a clue as to the overall structure of the data.

> class(plants)
[1] "data.frame"

| You're the best!
  |============                                                         |  17%
| It's very common for data to be stored in a data frame. It is the default
| class for data read into R using functions like read.csv() and read.table(),
| which you'll learn about in another lesson.

...
  |==============                                                       |  21%
| Since the dataset is stored in a data frame, we know it is rectangular. In
| other words, it has two dimensions (rows and columns) and fits neatly into a
| table or spreadsheet. Use dim(plants) to see exactly how many rows and
| columns we're dealing with.

> dim(plants)
[1] 5166   10

| Great job!
  |=================                                                    |  25%
| The first number you see (5166) is the number of rows (observations) and the
| second number (10) is the number of columns (variables).

...
  |====================                                                 |  29%
| You can also use nrow(plants) to see only the number of rows. Try it out.

> nrow(plants)
[1] 5166

| Excellent work!
  |=======================                                              |  33%
| ... And ncol(plants) to see only the number of columns.

> ncol(plants)
[1] 10

| You are amazing!
  |==========================                                           |  38%
| If you are curious as to how much space the dataset is occupying in memory,
| you can use object.size(plants).

> object.size(plants)
644232 bytes

| Excellent job!
  |=============================                                        |  42%
| Now that we have a sense of the shape and size of the dataset, let's get a
| feel for what's inside. names(plants) will return a character vector of
| column (i.e. variable) names. Give it a shot.

> names(plants)
 [1] "Scientific_Name"      "Duration"             "Active_Growth_Period"
 [4] "Foliage_Color"        "pH_Min"               "pH_Max"              
 [7] "Precip_Min"           "Precip_Max"           "Shade_Tolerance"     
[10] "Temp_Min_F"          

| Your dedication is inspiring!
  |================================                                     |  46%
| We've applied fairly descriptive variable names to this dataset, but that
| won't always be the case. A logical next step is to peek at the actual data.
| However, our dataset contains over 5000 observations (rows), so it's
| impractical to view the whole thing all at once.

...
  |==================================                                   |  50%
| The head() function allows you to preview the top of the dataset. Give it a
| try with only one argument.

> head(plants)
               Scientific_Name          Duration Active_Growth_Period
1                  Abelmoschus              <NA>                 <NA>
2       Abelmoschus esculentus Annual, Perennial                 <NA>
3                        Abies              <NA>                 <NA>
4               Abies balsamea         Perennial    Spring and Summer
5 Abies balsamea var. balsamea         Perennial                 <NA>
6                     Abutilon              <NA>                 <NA>
  Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1          <NA>     NA     NA         NA         NA            <NA>         NA
2          <NA>     NA     NA         NA         NA            <NA>         NA
3          <NA>     NA     NA         NA         NA            <NA>         NA
4         Green      4      6         13         60        Tolerant        -43
5          <NA>     NA     NA         NA         NA            <NA>         NA
6          <NA>     NA     NA         NA         NA            <NA>         NA

| Keep up the great work!
  |=====================================                                |  54%
| Take a minute to look through and understand the output above. Each row is
| labeled with the observation number and each column with the variable name.
| Your screen is probably not wide enough to view all 10 columns side-by-side,
| in which case R displays as many columns as it can on each line before
| continuing on the next.

...
  |========================================                             |  58%
| By default, head() shows you the first six rows of the data. You can alter
| this behavior by passing as a second argument the number of rows you'd like
| to view. Use head() to preview the first 10 rows of plants.

> head(plants, 10)
                     Scientific_Name          Duration Active_Growth_Period
1                        Abelmoschus              <NA>                 <NA>
2             Abelmoschus esculentus Annual, Perennial                 <NA>
3                              Abies              <NA>                 <NA>
4                     Abies balsamea         Perennial    Spring and Summer
5       Abies balsamea var. balsamea         Perennial                 <NA>
6                           Abutilon              <NA>                 <NA>
7               Abutilon theophrasti            Annual                 <NA>
8                             Acacia              <NA>                 <NA>
9                  Acacia constricta         Perennial    Spring and Summer
10 Acacia constricta var. constricta         Perennial                 <NA>
   Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance
1           <NA>     NA     NA         NA         NA            <NA>
2           <NA>     NA     NA         NA         NA            <NA>
3           <NA>     NA     NA         NA         NA            <NA>
4          Green      4    6.0         13         60        Tolerant
5           <NA>     NA     NA         NA         NA            <NA>
6           <NA>     NA     NA         NA         NA            <NA>
7           <NA>     NA     NA         NA         NA            <NA>
8           <NA>     NA     NA         NA         NA            <NA>
9          Green      7    8.5          4         20      Intolerant
10          <NA>     NA     NA         NA         NA            <NA>
   Temp_Min_F
1          NA
2          NA
3          NA
4         -43
5          NA
6          NA
7          NA
8          NA
9         -13
10         NA

| All that hard work is paying off!
  |===========================================                          |  62%
| The same applies for using tail() to preview the end of the dataset. Use
| tail() to view the last 15 rows.

> tail(plants, 15)
                      Scientific_Name  Duration Active_Growth_Period
5152                          Zizania      <NA>                 <NA>
5153                 Zizania aquatica    Annual               Spring
5154   Zizania aquatica var. aquatica    Annual                 <NA>
5155                Zizania palustris    Annual                 <NA>
5156 Zizania palustris var. palustris    Annual                 <NA>
5157                      Zizaniopsis      <NA>                 <NA>
5158             Zizaniopsis miliacea Perennial    Spring and Summer
5159                            Zizia      <NA>                 <NA>
5160                     Zizia aptera Perennial                 <NA>
5161                      Zizia aurea Perennial                 <NA>
5162                 Zizia trifoliata Perennial                 <NA>
5163                          Zostera      <NA>                 <NA>
5164                   Zostera marina Perennial                 <NA>
5165                           Zoysia      <NA>                 <NA>
5166                  Zoysia japonica Perennial                 <NA>
     Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance
5152          <NA>     NA     NA         NA         NA            <NA>
5153         Green    6.4    7.4         30         50      Intolerant
5154          <NA>     NA     NA         NA         NA            <NA>
5155          <NA>     NA     NA         NA         NA            <NA>
5156          <NA>     NA     NA         NA         NA            <NA>
5157          <NA>     NA     NA         NA         NA            <NA>
5158         Green    4.3    9.0         35         70      Intolerant
5159          <NA>     NA     NA         NA         NA            <NA>
5160          <NA>     NA     NA         NA         NA            <NA>
5161          <NA>     NA     NA         NA         NA            <NA>
5162          <NA>     NA     NA         NA         NA            <NA>
5163          <NA>     NA     NA         NA         NA            <NA>
5164          <NA>     NA     NA         NA         NA            <NA>
5165          <NA>     NA     NA         NA         NA            <NA>
5166          <NA>     NA     NA         NA         NA            <NA>
     Temp_Min_F
5152         NA
5153         32
5154         NA
5155         NA
5156         NA
5157         NA
5158         12
5159         NA
5160         NA
5161         NA
5162         NA
5163         NA
5164         NA
5165         NA
5166         NA

| That's correct!
  |==============================================                       |  67%
| After previewing the top and bottom of the data, you probably noticed lots
| of NAs, which are R's placeholders for missing values. Use summary(plants)
| to get a better feel for how each variable is distributed and how much of
| the dataset is missing.

> summary(plants)
                     Scientific_Name              Duration   
 Abelmoschus                 :   1   Perennial        :3031  
 Abelmoschus esculentus      :   1   Annual           : 682  
 Abies                       :   1   Annual, Perennial: 179  
 Abies balsamea              :   1   Annual, Biennial :  95  
 Abies balsamea var. balsamea:   1   Biennial         :  57  
 Abutilon                    :   1   (Other)          :  92  
 (Other)                     :5160   NA's             :1030  
           Active_Growth_Period      Foliage_Color      pH_Min     
 Spring and Summer   : 447      Dark Green  :  82   Min.   :3.000  
 Spring              : 144      Gray-Green  :  25   1st Qu.:4.500  
 Spring, Summer, Fall:  95      Green       : 692   Median :5.000  
 Summer              :  92      Red         :   4   Mean   :4.997  
 Summer and Fall     :  24      White-Gray  :   9   3rd Qu.:5.500  
 (Other)             :  30      Yellow-Green:  20   Max.   :7.000  
 NA's                :4334      NA's        :4334   NA's   :4327   
     pH_Max         Precip_Min      Precip_Max         Shade_Tolerance
 Min.   : 5.100   Min.   : 4.00   Min.   : 16.00   Intermediate: 242  
 1st Qu.: 7.000   1st Qu.:16.75   1st Qu.: 55.00   Intolerant  : 349  
 Median : 7.300   Median :28.00   Median : 60.00   Tolerant    : 246  
 Mean   : 7.344   Mean   :25.57   Mean   : 58.73   NA's        :4329  
 3rd Qu.: 7.800   3rd Qu.:32.00   3rd Qu.: 60.00                      
 Max.   :10.000   Max.   :60.00   Max.   :200.00                      
 NA's   :4327     NA's   :4338    NA's   :4338                        
   Temp_Min_F    
 Min.   :-79.00  
 1st Qu.:-38.00  
 Median :-33.00  
 Mean   :-22.53  
 3rd Qu.:-18.00  
 Max.   : 52.00  
 NA's   :4328    

| Your dedication is inspiring!
  |=================================================                    |  71%
| summary() provides different output for each variable, depending on its
| class. For numeric data such as Precip_Min, summary() displays the minimum,
| 1st quartile, median, mean, 3rd quartile, and maximum. These values help us
| understand how the data are distributed.

...
  |====================================================                 |  75%
| For categorical variables (called 'factor' variables in R), summary()
| displays the number of times each value (or 'level') occurs in the data. For
| example, each value of Scientific_Name only appears once, since it is unique
| to a specific plant. In contrast, the summary for Duration (also a factor
| variable) tells us that our dataset contains 3031 Perennial plants, 682
| Annual plants, etc.

...
  |=======================================================              |  79%
| You can see that R truncated the summary for Active_Growth_Period by
| including a catch-all category called 'Other'. Since it is a
| categorical/factor variable, we can see how many times each value actually
| occurs in the data with table(plants$Active_Growth_Period).

> table(plants$Active_Growth_Period)

Fall, Winter and Spring                  Spring         Spring and Fall 
                     15                     144                      10 
      Spring and Summer    Spring, Summer, Fall                  Summer 
                    447                      95                      92 
        Summer and Fall              Year Round 
                     24                       5 

| You are doing so well!
  |=========================================================            |  83%
| Each of the functions we've introduced so far has its place in helping you
| to better understand the structure of your data. However, we've left the
| best for last....

...
  |============================================================         |  88%
| Perhaps the most useful and concise function for understanding the
| *str*ucture of your data is str(). Give it a try now.

> str(plants)
'data.frame':	5166 obs. of  10 variables:
 $ Scientific_Name     : Factor w/ 5166 levels "Abelmoschus",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Duration            : Factor w/ 8 levels "Annual","Annual, Biennial",..: NA 4 NA 7 7 NA 1 NA 7 7 ...
 $ Active_Growth_Period: Factor w/ 8 levels "Fall, Winter and Spring",..: NA NA NA 4 NA NA NA NA 4 NA ...
 $ Foliage_Color       : Factor w/ 6 levels "Dark Green","Gray-Green",..: NA NA NA 3 NA NA NA NA 3 NA ...
 $ pH_Min              : num  NA NA NA 4 NA NA NA NA 7 NA ...
 $ pH_Max              : num  NA NA NA 6 NA NA NA NA 8.5 NA ...
 $ Precip_Min          : int  NA NA NA 13 NA NA NA NA 4 NA ...
 $ Precip_Max          : int  NA NA NA 60 NA NA NA NA 20 NA ...
 $ Shade_Tolerance     : Factor w/ 3 levels "Intermediate",..: NA NA NA 3 NA NA NA NA 2 NA ...
 $ Temp_Min_F          : int  NA NA NA -43 NA NA NA NA -13 NA ...

| That's a job well done!
  |===============================================================      |  92%
| The beauty of str() is that it combines many of the features of the other
| functions you've already seen, all in a concise and readable format. At the
| very top, it tells us that the class of plants is 'data.frame' and that it
| has 5166 observations and 10 variables. It then gives us the name and class
| of each variable, as well as a preview of its contents.

...
  |==================================================================   |  96%
| str() is actually a very general function that you can use on most objects
| in R. Any time you want to understand the structure of something (a dataset,
| function, etc.), str() is a good place to start.

...
  |=====================================================================| 100%
| In this lesson, you learned how to get a feel for the structure and contents
| of a new dataset using a collection of simple and useful functions. Taking
| the time to do this upfront can save you time and frustration later on in
| your analysis.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Looking_at_Data.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 13
  |                                                                     |   0%

| One of the great advantages of using a statistical programming language like
| R is its vast collection of tools for simulating random numbers.

...
  |==                                                                   |   3%
| This lesson assumes familiarity with a few common probability distributions,
| but these topics will only be discussed with respect to random number
| generation. Even if you have no prior experience with these concepts, you
| should be able to complete the lesson and understand the main ideas.

...
  |====                                                                 |   6%
| The first function we'll use to generate random numbers is sample(). Use
| ?sample to pull up the documentation.

> ?sample

| You are doing so well!
  |======                                                               |   9%
| Let's simulate rolling four six-sided dice: sample(1:6, 4, replace = TRUE).

> sample(1:6, 4, replace=TRUE)
[1] 1 2 2 2

| You're the best!
  |=========                                                            |  12%
| Now repeat the command to see how your result differs. (The probability of
| rolling the exact same result is (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace=TRUE)
[1] 1 3 4 4

| Keep working like that and you'll get there!
  |===========                                                          |  16%
| sample(1:6, 4, replace = TRUE) instructs R to randomly select four numbers
| between 1 and 6, WITH replacement. Sampling with replacement simply means
| that each number is "replaced" after it is selected, so that the same number
| can show up more than once. This is what we want here, since what you roll
| on one die shouldn't affect what you roll on any of the others.

...
  |=============                                                        |  19%
| Now sample 10 numbers between 1 and 20, WITHOUT replacement. To sample
| without replacement, simply leave off the 'replace' argument.

> sample(1:20, 10)
 [1] 16  4 13 18  9 10  3  2 20  5

| That's correct!
  |===============                                                      |  22%
| Since the last command sampled without replacement, no number appears more
| than once in the output.

...
  |=================                                                    |  25%
| LETTERS is a predefined variable in R containing a vector of all 26 letters
| of the English alphabet. Take a look at it now.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R"
[19] "S" "T" "U" "V" "W" "X" "Y" "Z"

| That's the answer I was looking for.
  |===================                                                  |  28%
| The sample() function can also be used to permute, or rearrange, the
| elements of a vector. For example, try sample(LETTERS) to permute all 26
| letters of the English alphabet.

> sample(LETTERS)
 [1] "N" "C" "V" "D" "E" "G" "O" "I" "R" "P" "F" "A" "Y" "X" "H" "J" "K" "S"
[19] "T" "L" "U" "W" "Q" "M" "B" "Z"

| You are quite good my friend!
  |======================                                               |  31%
| This is identical to taking a sample of size 26 from LETTERS, without
| replacement. When the 'size' argument to sample() is not specified, R takes
| a sample equal in size to the vector from which you are sampling.

...
  |========================                                             |  34%
| Now, suppose we want to simulate 100 flips of an unfair two-sided coin. This
| particular coin has a 0.3 probability of landing 'tails' and a 0.7
| probability of landing 'heads'.

...
  |==========================                                           |  38%
| Let the value 0 represent tails and the value 1 represent heads. Use
| sample() to draw a sample of size 100 from the vector c(0,1), with
| replacement. Since the coin is unfair, we must attach specific probabilities
| to the values 0 (tails) and 1 (heads) with a fourth argument, prob = c(0.3,
| 0.7). Assign the result to a new variable called flips.

> flips <- sample(c(0,1), 100, prob=(c(0.3,0.7)))
Error in sample.int(length(x), size, replace, prob) : 
  cannot take a sample larger than the population when 'replace = FALSE'
> flips <- sample(c(0,1), 100, prob=(c(0.3,0.7)), replace=TRUE)

| Not exactly. Give it another go. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign
| the result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace=TRUE, prob=(c(0.3,0.7)))

| Not quite, but you're learning! Try again. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign
| the result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace=TRUE, prob=(c(0.3,0.7))
+ 
+ )

| Not quite right, but keep trying. Or, type info() for more options.

| The following command will produce 100 flips of an unfair coin and assign
| the result: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| You're the best!
  |============================                                         |  41%
| View the contents of the flips variable.

> flips
  [1] 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0
 [38] 1 1 1 0 0 0 1 1 1 0 1 0 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 0 1 1 1
 [75] 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 0 1 0 1

| Keep working like that and you'll get there!
  |==============================                                       |  44%
| Since we set the probability of landing heads on any given flip to be 0.7,
| we'd expect approximately 70 of our coin flips to have the value 1. Count
| the actual number of 1s contained in flips using the sum() function.

> sum(flips)
[1] 74

| You got it right!
  |================================                                     |  47%
| A coin flip is a binary outcome (0 or 1) and we are performing 100
| independent trials (coin flips), so we can use use rbinom() to simulate a
| binomial random variable. Pull up the documentation for rbinom() using
| ?rbinom.

> ?rbinom

| Your dedication is inspiring!
  |==================================                                   |  50%
| Each probability distribution in R has an r*** function (for "random"), a
| d*** function (for "density"), a p*** (for "probability"), and q*** (for
| "quantile"). We are most interested in the r*** functions in this lesson,
| but I encourage you to explore the others on your own.

...
  |=====================================                                |  53%
| A binomial random variable represents the number of 'successes' (heads) in a
| given number of independent 'trials' (coin flips). Therefore, we can
| generate a single random variable that represents the number of heads in 100
| flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that
| you only specify the probability of 'success' (heads) and NOT the
| probability of 'failure' (tails). Try it now.

> rbinom(1, size=100, prob=0.7)
[1] 71

| You nailed it! Good job!
  |=======================================                              |  56%
| Equivalently, if we want to see all of the 0s and 1s, we can request 100
| observations, each of size 1, with success probability of 0.7. Give it a
| try, assigning the result to a new variable called flips2.

> flips <- rbinom(1, size=100, prob=0.7)

| Almost! Try again. Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result
| to flips2.

> flips <- rbinom(n=100, size=1, prob=0.7)

| You're close...I can feel it! Try it again. Or, type info() for more
| options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result
| to flips2.

> flips2 <- rbinom(n=100, size=1, prob=0.7)

| Keep up the great work!
  |=========================================                            |  59%
| View the contents of flips2.

> flips2
  [1] 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 1 1 0 0 1 1 1 1 1
 [38] 1 1 1 1 1 0 1 1 1 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 1 0 1 1
 [75] 1 0 0 0 1 1 0 1 0 0 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1

| Great job!
  |===========================================                          |  62%
| Now use sum() to count the number of 1s (heads) in flips2. It should be
| close to 70!

> sum(flips2)
[1] 71

| Perseverance, that's the answer.
  |=============================================                        |  66%
| Similar to rbinom(), we can use R to simulate random numbers from many other
| probability distributions. Pull up the documentation for rnorm() now.

> ?rnorm

| You are quite good my friend!
  |===============================================                      |  69%
| The standard normal distribution has mean 0 and standard deviation 1. As you
| can see under the 'Usage' section in the documentation, the default values
| for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively.
| Thus, rnorm(10) will generate 10 random numbers from a standard normal
| distribution. Give it a try.

> rnorm(10)
 [1] -0.4143362  0.3144457  0.5772044  0.8418078 -1.0795755  1.3771392
 [7] -1.0275205  0.1048707  1.1351270 -1.5113052

| You are amazing!
  |==================================================                   |  72%
| Now do the same, except with a mean of 100 and a standard deviation of 25.

> rnorm(10,mean=100,sd=25)
 [1] 142.29711  98.29905 133.85216 106.62573 137.93370  78.43968  80.62221
 [8]  73.03940 102.16282  83.97536

| All that hard work is paying off!
  |====================================================                 |  75%
| Finally, what if we want to simulate 100 *groups* of random numbers, each
| containing 5 values generated from a Poisson distribution with mean 10?
| Let's start with one group of 5 numbers, then I'll show you how to repeat
| the operation 100 times in a convenient and compact way.

...
  |======================================================               |  78%
| Generate 5 random values from a Poisson distribution with mean 10. Check out
| the documentation for rpois() if you need help.

> rpois(5,10)
[1]  9 14  8 11  6

| Excellent work!
  |========================================================             |  81%
| Now use replicate(100, rpois(5, 10)) to perform this operation 100 times.
| Store the result in a new variable called my_pois.

> my_pois <- replicate(100, rpois(5,10))

| Excellent job!
  |==========================================================           |  84%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
[1,]   10    5   15   10   14    7    7   12    9     9    13     6    14
[2,]    9   13    6   13   11   10    5   11   14     7    10    13    10
[3,]   12   16   17   13    9   12    6    9    4     6     7     6     5
[4,]    9   11    9    9   11   14   15    6   14     9    15    12     7
[5,]    8    6   13    7   10    9    9   11   11    15     6     6     8
     [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
[1,]    12    10    14     8    16     9    13    11    11    10    15     9
[2,]     9    12     7    11     9     9     4     7     6     9    13    15
[3,]     8    12    10     9     5    11    13     9    12     9    14    13
[4,]     6     9     8    13    12    12     6    11     6     6    10     8
[5,]     8    10    16     7     9    16     8     4     6    10    13    11
     [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
[1,]    10     9    11     5     5     8     8     5    12    13    13    18
[2,]    12    10     8    12    10    10    11    12     4    12    10     7
[3,]     9    13     6     8    10    12     5     9    11    15    10     8
[4,]    12     9     9    10     6    11    12     8    11     9    10     9
[5,]    11     6    10     6    17     6     9     9    10    13     8    11
     [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]
[1,]     9    17     9     7     9    10     4     9    15    12     9    13
[2,]    14    10    14     5    10    13    11    10    10    12    10    17
[3,]     5     8    12    11     9    11     8    12    10    14     7     9
[4,]    11     9    11     6     7     9    14     8    13     9    13    10
[5,]     9     8    10    11    13     6     8     8    11     6     9    17
     [,50] [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61]
[1,]     8    10     6    10     8     8    14    13    10     7    12    10
[2,]    10     9     8    10     9     7    11    10    12    10     9     7
[3,]    14    15    16    14    11    10    12     9    14    15     8    14
[4,]     6     9    11     7    11    16    14    11    11    12    13    11
[5,]    10    10    13    15     6    11     8    11    10    12     7    12
     [,62] [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73]
[1,]    11     8     8     9     6     9     6     9    12    12     7     9
[2,]     4    13     8    13     5    13     7    10    10     9    13    12
[3,]     8    10    13    14    12    10     8     6    10     8     6     8
[4,]    11     8     9     5     9     7     9    13    10     9     8    11
[5,]    11     9    12    12     8     7     9    12    12    10    11     9
     [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85]
[1,]    10     9     8     9    16    15     7    10    11     7     5     7
[2,]    11     6    10     7    10     5     7     8     9    18    16     9
[3,]    10    13     9     5    12     8    11     9    14     6    12     7
[4,]     4    15    12    10    10     8     8     8    14     7     5    10
[5,]    15     7    10    10    10    18     7    12    15     8    11     8
     [,86] [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97]
[1,]    11    10     7    11    10    10     9    11    12     7     7     9
[2,]     9    12     7     8     6    13     6     7     4    14    10     9
[3,]     8    16     5    12     8     8    11    14    12    13     6     8
[4,]     8    12     6     8    14     9     6    10    12    13     9     6
[5,]    12    11     4    12     8    16    10    11     8    18     7     7
     [,98] [,99] [,100]
[1,]     8    13      5
[2,]     8     9     10
[3,]    14     4      8
[4,]    13    13      6
[5,]    16     8     11

| Nice work!
  |============================================================         |  88%
| replicate() created a matrix, each column of which contains 5 random numbers
| generated from a Poisson distribution with mean 10. Now we can find the mean
| of each column in my_pois using the colMeans() function. Store the result in
| a variable called cm.

> cm <- colMeans(my_pois)

| You got it right!
  |===============================================================      |  91%
| And let's take a look at the distribution of our column means by plotting a
| histogram with hist(cm).

> hist(cm)

| Perseverance, that's the answer.
  |=================================================================    |  94%
| Looks like our column means are almost normally distributed, right? That's
| the Central Limit Theorem at work, but that's a lesson for another day!

...
  |===================================================================  |  97%
| All of the standard probability distributions are built into R, including
| exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well,
| you see the pattern.

...
  |=====================================================================| 100%
| Simulation is practically a field of its own and we've only skimmed the
| surface of what's possible. I encourage you to explore these and other
| functions further on your own.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Simulation.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 14
  |                                                                     |   0%

| R has a special way of representing dates and times, which can be helpful if
| you're working with data that show how something changes over time (i.e.
| time-series data) or if your data contain some other temporal information,
| like dates of birth.

...
  |==                                                                   |   3%
| Dates are represented by the 'Date' class and times are represented by the
| 'POSIXct' and 'POSIXlt' classes. Internally, dates are stored as the number
| of days since 1970-01-01 and times are stored as either the number of
| seconds since 1970-01-01 (for 'POSIXct') or a list of seconds, minutes,
| hours, etc. (for 'POSIXlt').

...
  |====                                                                 |   6%
| Let's start by using d1 <- Sys.Date() to get the current date and store it
| in the variable d1. (That's the letter 'd' and the number 1.)

> d1 <- Sys.Date()

| You are amazing!
  |======                                                               |   9%
| Use the class() function to confirm d1 is a Date object.

> class(d1)
[1] "Date"

| That's correct!
  |========                                                             |  11%
| We can use the unclass() function to see what d1 looks like internally. Try
| it out.

> unclass(d1)
[1] 16540

| Nice work!
  |==========                                                           |  14%
| That's the exact number of days since 1970-01-01!

...
  |============                                                         |  17%
| However, if you print d1 to the console, you'll get today's date --
| YEAR-MONTH-DAY. Give it a try.

> d1
[1] "2015-04-15"

| Great job!
  |==============                                                       |  20%
| What if we need to reference a date prior to 1970-01-01? Create a variable
| d2 containing as.Date("1969-01-01").

> d2 <- as.Date("1969-01-01")

| You got it!
  |================                                                     |  23%
| Now use unclass() again to see what d2 looks like internally.

> unclass(d2)
[1] -365

| Excellent work!
  |==================                                                   |  26%
| As you may have anticipated, you get a negative number. In this case, it's
| -365, since 1969-01-01 is exactly one calendar year (i.e. 365 days) BEFORE
| 1970-01-01.

...
  |====================                                                 |  29%
| Now, let's take a look at how R stores times. You can access the current
| date and time using the Sys.time() function with no arguments. Do this and
| store the result in a variable called t1.

> t1 <- Sys.time()

| You're the best!
  |======================                                               |  31%
| View the contents of t1.

> t1
[1] "2015-04-15 15:06:19 MDT"

| You are amazing!
  |========================                                             |  34%
| And check the class() of t1.

> class(t1)
[1] "POSIXct" "POSIXt" 

| Keep up the great work!
  |==========================                                           |  37%
| As mentioned earlier, POSIXct is just one of two ways that R represents time
| information. (You can ignore the second value above, POSIXt, which just
| functions as a common language between POSIXct and POSIXlt.) Use unclass()
| to see what t1 looks like internally -- the (large) number of seconds since
| the beginning of 1970.

> unclass(t1)
[1] 1429131979

| Keep up the great work!
  |============================                                         |  40%
| By default, Sys.time() returns an object of class POSIXct, but we can coerce
| the result to POSIXlt with as.POSIXlt(Sys.time()). Give it a try and store
| the result in t2.

> t2 <- as.POSIXlt(Sys.time())

| Excellent job!
  |==============================                                       |  43%
| Check the class of t2.

> class(t2)
[1] "POSIXlt" "POSIXt" 

| Excellent work!
  |================================                                     |  46%
| Now view its contents.

> t2
[1] "2015-04-15 15:06:59 MDT"

| Great job!
  |==================================                                   |  49%
| The printed format of t2 is identical to that of t1. Now unclass() t2 to see
| how it is different internally.

> unclass(t2)
$sec
[1] 59.25186

$min
[1] 6

$hour
[1] 15

$mday
[1] 15

$mon
[1] 3

$year
[1] 115

$wday
[1] 3

$yday
[1] 104

$isdst
[1] 1

$zone
[1] "MDT"

$gmtoff
[1] -21600

attr(,"tzone")
[1] ""    "MST" "MDT"

| You're the best!
  |===================================                                  |  51%
| t2, like all POSIXlt objects, is just a list of values that make up the date
| and time. Use str(unclass(t2)) to have a more compact view.

> str(unclass(t2))
List of 11
 $ sec   : num 59.3
 $ min   : int 6
 $ hour  : int 15
 $ mday  : int 15
 $ mon   : int 3
 $ year  : int 115
 $ wday  : int 3
 $ yday  : int 104
 $ isdst : int 1
 $ zone  : chr "MDT"
 $ gmtoff: int -21600
 - attr(*, "tzone")= chr [1:3] "" "MST" "MDT"

| You are doing so well!
  |=====================================                                |  54%
| If, for example, we want just the minutes from the time stored in t2, we can
| access them with t2$min. Give it a try.

> t2$min
[1] 6

| You are quite good my friend!
  |=======================================                              |  57%
| Now that we have explored all three types of date and time objects, let's
| look at a few functions that extract useful information from any of these
| objects -- weekdays(), months(), and quarters().

...
  |=========================================                            |  60%
| The weekdays() function will return the day of week from any date or time
| object. Try it out on d1, which is the Date object that contains today's
| date.

> weekdays(d1)
[1] "Wednesday"

| Excellent job!
  |===========================================                          |  63%
| The months() function also works on any date or time object. Try it on t1,
| which is the POSIXct object that contains the current time (well, it was the
| current time when you created it).

> months(t1)
[1] "April"

| That's the answer I was looking for.
  |=============================================                        |  66%
| The quarters() function returns the quarter of the year (Q1-Q4) from any
| date or time object. Try it on t2, which is the POSIXlt object that contains
| the time at which you created it.

> quarters(t2)
[1] "Q2"

| You got it!
  |===============================================                      |  69%
| Often, the dates and times in a dataset will be in a format that R does not
| recognize. The strptime() function can be helpful in this situation.

...
  |=================================================                    |  71%
| strptime() converts character vectors to POSIXlt. In that sense, it is
| similar to as.POSIXlt(), except that the input doesn't have to be in a
| particular format (YYYY-MM-DD).

...
  |===================================================                  |  74%
| To see how it works, store the following character string in a variable
| called t3: "October 17, 1986 08:24" (with the quotes).

> t3 <- "October 17, 1986 08:24"

| Excellent work!
  |=====================================================                |  77%
| Now, use strptime(t3, "%B %d, %Y %H:%M") to help R convert our date/time
| object to a format that it understands. Assign the result to a new variable
| called t4. (You should pull up the documentation for strptime() if you'd
| like to know more about how it works.)

> strptime(t3, "%B %d, %Y %H:%M")
[1] "1986-10-17 08:24:00 MDT"

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| t4 <- strptime(t3, "%B %d, %Y %H:%M") will convert our date/time object to a
| format that R understands.

> t4 <- strptime(t3, "%B %d, %Y %H:%M")

| You are doing so well!
  |=======================================================              |  80%
| Print the contents of t4.

> t4
[1] "1986-10-17 08:24:00 MDT"

| Keep up the great work!
  |=========================================================            |  83%
| That's the format we've come to expect. Now, let's check its class().

> class(t4)
[1] "POSIXlt" "POSIXt" 

| You nailed it! Good job!
  |===========================================================          |  86%
| Finally, there are a number of operations that you can perform on dates and
| times, including arithmetic operations (+ and -) and comparisons (<, ==,
| etc.)

...
  |=============================================================        |  89%
| The variable t1 contains the time at which you created it (recall you used
| Sys.time()). Confirm that some time has passed since you created t1 by using
| the 'greater than' operator to compare it to the current time: Sys.time() >
| t1

> Sys.time() > t1
[1] TRUE

| Keep working like that and you'll get there!
  |===============================================================      |  91%
| So we know that some time has passed, but how much? Try subtracting t1 from
| the current time using Sys.time() - t1. Don't forget the parentheses at the
| end of Sys.time(), since it is a function.

> Sys.time() - t1
Time difference of 4.227643 mins

| Keep up the great work!
  |=================================================================    |  94%
| The same line of thinking applies to addition and the other comparison
| operators. If you want more control over the units when finding the above
| difference in times, you can use difftime(), which allows you to specify a
| 'units' parameter.

...
  |===================================================================  |  97%
| Use difftime(Sys.time(), t1, units = 'days') to find the amount of time in
| DAYS that has passed since you created t1.

> difftime(Sys.time(), t1, units='days')
Time difference of 0.003249941 days

| That's a job well done!
  |=====================================================================| 100%
| In this lesson, you learned how to work with dates and times in R. While it
| is important to understand the basics, if you find yourself working with
| dates and times often, you may want to check out the lubridate package by
| Hadley Wickham.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Dates_and_Times.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 15
  |                                                                     |   0%

| One of the greatest strengths of R, relative to other programming languages,
| is the ease with which we can create publication-quality graphics. In this
| lesson, you'll learn about base graphics in R.

...
  |==                                                                   |   2%
| We do not cover the more advanced portions of graphics in R in this lesson.
| These include lattice, ggplot2 and ggvis.

...
  |===                                                                  |   4%
| There is a school of thought that this approach is backwards, that we should
| teach ggplot2 first. See
| http://varianceexplained.org/r/teach_ggplot2_to_beginners/ for an outline of
| this view.

...
  |=====                                                                |   7%
| Load the included data frame cars with data(cars).

> data(cars)

| Excellent work!
  |======                                                               |   9%
| To fix ideas, we will work with simple data frames. Our main goal is to
| introduce various plotting functions and their arguments. All the output
| would look more interesting with larger, more complex data sets.

...
  |========                                                             |  11%
| Pull up the help page for cars.

> ?cars

| Excellent work!
  |=========                                                            |  13%
| As you can see in the help page, the cars data set has only two variables:
| speed and stopping distance. Note that the data is from the 1920s.

...
  |===========                                                          |  16%
| Run head() on the cars data.

> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10

| You are doing so well!
  |============                                                         |  18%
| Before plotting, it is always a good idea to get a sense of the data. Key R
| commands for doing so include, dim(), names(), head(), tail() and summary().

...
  |==============                                                       |  20%
| Run the plot() command on the cars data frame.

> plot(cars)

| Your dedication is inspiring!
  |===============                                                      |  22%
| As always, R tries very hard to give you something sensible given the
| information that you have provided to it. First, R notes that the data frame
| you have given it has just two columns, so it assumes that you want to plot
| one column versus the other.

...
  |=================                                                    |  24%
| Second, since we do not provide labels for either axis, R uses the names of
| the columns. Third, it creates axis tick marks at nice round numbers and
| labels them accordingly. Fourth, it uses the other defaults supplied in
| plot().

...
  |==================                                                   |  27%
| We will now spend some time exploring plot, but many of the topics covered
| here will apply to most other R graphics functions. Note that 'plot' is
| short for scatterplot.

...
  |====================                                                 |  29%
| Look up the help page for plot().

> ?plot

| You are amazing!
  |=====================                                                |  31%
| The help page for plot() highlights the different arguments that the
| function can take. The two most important are x and y, the variables that
| will be plotted. For the next set of questions, include the argument names
| in your answers. That is, do not type plot(cars$speed, cars$dist), although
| that will work. Instead, use plot(x = cars$speed, y = cars$dist).

...
  |=======================                                              |  33%
| Use plot() command to show speed on the x-axis and dist on the y-axis from
| the cars data frame. Use the form of the plot command in which vectors are
| explicitly passed in as arguments for x and y.

> plot(x=cars$speed, y=cars$dist)

| Your dedication is inspiring!
  |=========================                                            |  36%
| Note that this produces a slightly different answer than plot(cars). In this
| case, R is not sure what you want to use as the labels on the axes, so it
| just uses the arguments which you pass in, data frame name and dollar signs
| included.

...
  |==========================                                           |  38%
| Note that there are other ways to call the plot command, i.e., using the
| "formula" interface. For example, we get a similar plot to the above with
| plot(dist ~ speed, cars). However, we will wait till later in the lesson
| before using the formula interface.

...
  |============================                                         |  40%
| Use plot() command to show dist on the x-axis and speed on the y-axis from
| the cars data frame. This is the opposite of what we did above.

> plot(cars$dist, cars$speed)

| Excellent work!
  |=============================                                        |  42%
| It probably makes more sense for speed to go on the x-axis since stopping
| distance is a function of speed more than the other way around. So, for the
| rest of the questions in this portion of the lesson, always assign the
| arguments accordingly.

...
  |===============================                                      |  44%
| In fact, you can assume that the answers to the next few questions are all
| of the form plot(x = cars$speed, y = cars$dist, ...) but with various
| arguments used in place of the ...

...
  |================================                                     |  47%
| Recreate the plot with the label of the x-axis set to "Speed".

> plot(x = cars$speed, y = cars$dist)

| That's not exactly what I'm looking for. Try again. Or, type info() for more
| options.

| Type plot(x = cars$speed, y = cars$dist, xlab = "Speed") to create the plot.

> plot(x = cars$speed, y = cars$dist, xlab="Speed")

| You got it right!
  |==================================                                   |  49%
| Recreate the plot with the label of the y-axis set to "Stopping Distance".

> plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type
| info() for more options.

| Type plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance") to
| create the plot.

> plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")

| Keep up the great work!
  |===================================                                  |  51%
| Recreate the plot with "Speed" and "Stopping Distance" as axis labels.

> plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")

| Great job!
  |=====================================                                |  53%
| The reason that plots(cars) worked at the beginning of the lesson was that R
| was smart enough to know that the first element (i.e., the first column) in
| cars should be assigned to the x argument and the second element to the y
| argument. To save on typing, the next set of answers will all be of the
| form, plot(cars, ...) with various arguments added.

...
  |======================================                               |  56%
| For each question, we will only want one additional argument at a time. Of
| course, you can pass in more than one argument when doing a real project.

...
  |========================================                             |  58%
| Plot cars with a main title of "My Plot". Note that the argument for the
| main title is "main" not "title".

> plot(cars, main="My Plot")

| Your dedication is inspiring!
  |=========================================                            |  60%
| Plot cars with a sub title of "My Plot Subtitle".

> plot(cars, main="My Plot", submain="My Plot Subtitle")
Warning messages:
1: In plot.window(...) : "submain" is not a graphical parameter
2: In plot.xy(xy, type, ...) : "submain" is not a graphical parameter
3: In axis(side = side, at = at, labels = labels, ...) :
  "submain" is not a graphical parameter
4: In axis(side = side, at = at, labels = labels, ...) :
  "submain" is not a graphical parameter
5: In box(...) : "submain" is not a graphical parameter
6: In title(...) : "submain" is not a graphical parameter

| That's not the answer I was looking for, but try again. Or, type info() for
| more options.

| Type plot(cars, sub = "My Plot Subtitle") to create the plot.

> plot(cars, sub="My Plot Subtitle")

| Your dedication is inspiring!
  |===========================================                          |  62%
| The plot help page (?plot) only covers a small number of the many arguments
| that can be passed in to plot() and to other graphical functions. To begin
| to explore the many other options, look at ?par. Let's look at some of the
| more commonly used ones. Continue using plot(cars, ...) as the base answer
| to these questions.

...
  |============================================                         |  64%
| Plot cars with a red color. (Use col = 2 to achieve this effect.)

> plot(cars, col=2)

| Keep up the great work!
  |==============================================                       |  67%
| Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15)
| to achieve this effect.)

> plot(cars, xlim=c(10,15))

| Nice work!
  |================================================                     |  69%
| You can also change the shape of the symbols in the plot. The help page for
| points (?points) provides the details.

...
  |=================================================                    |  71%
| Plot cars using triangles.  (Use pch = 2 to achieve this effect.)

> plot(cars, pch=2)

| Keep up the great work!
  |===================================================                  |  73%
| Arguments like "col" and "pch" may not seem very intuitive. And that is
| because they aren't! So, many/most people use more modern packages, like
| ggplot2, for creating their graphics in R.

...
  |====================================================                 |  76%
| It is, however, useful to have an introduction to base graphics because many
| of the idioms in lattice and ggplot2 are modeled on them.

...
  |======================================================               |  78%
| Let's now look at some other functions in base graphics that may be useful,
| starting with boxplots.

...
  |=======================================================              |  80%
| Load the mtcars data frame.

> load(mtcars)
Error in load(mtcars) : bad 'file' argument
> mtcars
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2

| That's not the answer I was looking for, but try again. Or, type info() for
| more options.

| Type data(mtcars) to load the data.

> data(mtcars)

| That's the answer I was looking for.
  |=========================================================            |  82%
| Anytime that you load up a new data frame, you should explore it before
| using it. In the middle of a swirl lesson, just type play(). This
| temporarily suspends the lesson (without losing the work you have already
| done) and allows you to issue commands like dim(mtcares) and head(mtcars).
| Once you are done examining the data, just type nxt() and the lesson will
| pick up where it left off.

...
  |==========================================================           |  84%
| Look up the help page for boxplot().

> ?boxplot

| Excellent work!
  |============================================================         |  87%
| Instead of adding data columns directly as input arguments, as we did with
| plot(), it is often handy to pass in the entire data frame. This is what the
| "data" argument in boxplot() allows.

...
  |=============================================================        |  89%
| boxplot(), like many R functions, also takes a "formula" argument, generally
| an expression with a tilde ("~") which indicates the relationship between
| the input variables. This allows you to enter something like mpg ~ cyl to
| plot the relationship between cyl (number of cylinders) on the x-axis and
| mpg (miles per gallon) on the y-axis.

...
  |===============================================================      |  91%
| Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box
| plot.

> boxplot(formula=mpg~cyl, data=mtcars)

| You're the best!
  |================================================================     |  93%
| The plot shows that mpg is much lower for cars with more cylinders. Note
| that we can use the same set of arguments that we explored with plot() above
| to add axis labels, titles and so on.

...
  |==================================================================   |  96%
| When looking at a single variable, histograms are a useful tool. hist() is
| the associated R function. Like plot(), hist() is best used by just passing
| in a single vector.

...
  |===================================================================  |  98%
| Use hist() with the vector mtcars$mpg to create a histogram.

> hist(mtcars$mpg)

| You are really on a roll!
  |=====================================================================| 100%
| In this lesson, you learned how to work with base graphics in R. The best
| place to go from here is to study the ggplot2 package. If you want to
| explore other elements of base graphics, then this web page
| (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful
| overview.

...

| Are you currently enrolled in the Coursera course associated with this
| lesson?

1: Yes
2: No

Selection: 1

| Would you like me to notify Coursera that you've completed this lesson? If
| so, I'll need to get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: 1

| Is the following information correct?

Course ID: rprog-013
Submission login (email): ashley.dunn@utah.edu
Submission password: xwpd6ZKKeP

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| Great work!

| I've notified Coursera that you have completed rprog-013, Base_Graphics.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 0

| Leaving swirl now. Type swirl() to resume.

> 